// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  ListKeysApiV1ApiKeysGetData,
  ListKeysApiV1ApiKeysGetResponse,
  ListKeysApiV1ApiKeysGetError,
  GenerateKeyApiV1ApiKeysPostData,
  GenerateKeyApiV1ApiKeysPostResponse,
  GenerateKeyApiV1ApiKeysPostError,
  DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteData,
  DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponse,
  DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteError,
  UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutData,
  UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponse,
  UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutError,
  ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostData,
  ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponse,
  ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostError,
  ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostData,
  ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponse,
  ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostError,
  ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostData,
  ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponse,
  ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostError,
  ListDataSinksApiV1DataSinksGetData,
  ListDataSinksApiV1DataSinksGetResponse,
  ListDataSinksApiV1DataSinksGetError,
  CreateDataSinkApiV1DataSinksPostData,
  CreateDataSinkApiV1DataSinksPostResponse,
  CreateDataSinkApiV1DataSinksPostError,
  UpsertDataSinkApiV1DataSinksPutData,
  UpsertDataSinkApiV1DataSinksPutResponse,
  UpsertDataSinkApiV1DataSinksPutError,
  DeleteDataSinkApiV1DataSinksDataSinkIdDeleteData,
  DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponse,
  DeleteDataSinkApiV1DataSinksDataSinkIdDeleteError,
  GetDataSinkApiV1DataSinksDataSinkIdGetData,
  GetDataSinkApiV1DataSinksDataSinkIdGetResponse,
  GetDataSinkApiV1DataSinksDataSinkIdGetError,
  UpdateDataSinkApiV1DataSinksDataSinkIdPutData,
  UpdateDataSinkApiV1DataSinksDataSinkIdPutResponse,
  UpdateDataSinkApiV1DataSinksDataSinkIdPutError,
  ListDataSourcesApiV1DataSourcesGetData,
  ListDataSourcesApiV1DataSourcesGetResponse,
  ListDataSourcesApiV1DataSourcesGetError,
  CreateDataSourceApiV1DataSourcesPostData,
  CreateDataSourceApiV1DataSourcesPostResponse,
  CreateDataSourceApiV1DataSourcesPostError,
  UpsertDataSourceApiV1DataSourcesPutData,
  UpsertDataSourceApiV1DataSourcesPutResponse,
  UpsertDataSourceApiV1DataSourcesPutError,
  DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteData,
  DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponse,
  DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteError,
  GetDataSourceApiV1DataSourcesDataSourceIdGetData,
  GetDataSourceApiV1DataSourcesDataSourceIdGetResponse,
  GetDataSourceApiV1DataSourcesDataSourceIdGetError,
  UpdateDataSourceApiV1DataSourcesDataSourceIdPutData,
  UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponse,
  UpdateDataSourceApiV1DataSourcesDataSourceIdPutError,
  ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetData,
  ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponse,
  ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetError,
  CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostData,
  CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponse,
  CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostError,
  UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutData,
  UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponse,
  UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutError,
  DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteData,
  DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponse,
  DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteError,
  UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutData,
  UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponse,
  UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutError,
  ListOrganizationsApiV1OrganizationsGetData,
  ListOrganizationsApiV1OrganizationsGetResponse,
  ListOrganizationsApiV1OrganizationsGetError,
  CreateOrganizationApiV1OrganizationsPostData,
  CreateOrganizationApiV1OrganizationsPostResponse,
  CreateOrganizationApiV1OrganizationsPostError,
  UpsertOrganizationApiV1OrganizationsPutData,
  UpsertOrganizationApiV1OrganizationsPutResponse,
  UpsertOrganizationApiV1OrganizationsPutError,
  GetDefaultOrganizationApiV1OrganizationsDefaultGetData,
  GetDefaultOrganizationApiV1OrganizationsDefaultGetResponse,
  GetDefaultOrganizationApiV1OrganizationsDefaultGetError,
  SetDefaultOrganizationApiV1OrganizationsDefaultPutData,
  SetDefaultOrganizationApiV1OrganizationsDefaultPutResponse,
  SetDefaultOrganizationApiV1OrganizationsDefaultPutError,
  DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteData,
  DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponse,
  DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteError,
  GetOrganizationApiV1OrganizationsOrganizationIdGetData,
  GetOrganizationApiV1OrganizationsOrganizationIdGetResponse,
  GetOrganizationApiV1OrganizationsOrganizationIdGetError,
  UpdateOrganizationApiV1OrganizationsOrganizationIdPutData,
  UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse,
  UpdateOrganizationApiV1OrganizationsOrganizationIdPutError,
  GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetData,
  GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponse,
  GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetError,
  ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetData,
  ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponse,
  ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetError,
  AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutData,
  AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponse,
  AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutError,
  RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteData,
  RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponse,
  RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteError,
  BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutData,
  BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponse,
  BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutError,
  ListRolesApiV1OrganizationsOrganizationIdRolesGetData,
  ListRolesApiV1OrganizationsOrganizationIdRolesGetResponse,
  ListRolesApiV1OrganizationsOrganizationIdRolesGetError,
  GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetData,
  GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponse,
  GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetError,
  AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutData,
  AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponse,
  AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutError,
  ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetData,
  ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponse,
  ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetError,
  AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutData,
  AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutError,
  RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteData,
  RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteError,
  ListProjectsApiV1ProjectsGetData,
  ListProjectsApiV1ProjectsGetResponse,
  ListProjectsApiV1ProjectsGetError,
  CreateProjectApiV1ProjectsPostData,
  CreateProjectApiV1ProjectsPostResponse,
  CreateProjectApiV1ProjectsPostError,
  UpsertProjectApiV1ProjectsPutData,
  UpsertProjectApiV1ProjectsPutResponse,
  UpsertProjectApiV1ProjectsPutError,
  DeleteProjectApiV1ProjectsProjectIdDeleteData,
  DeleteProjectApiV1ProjectsProjectIdDeleteResponse,
  DeleteProjectApiV1ProjectsProjectIdDeleteError,
  GetProjectApiV1ProjectsProjectIdGetData,
  GetProjectApiV1ProjectsProjectIdGetResponse,
  GetProjectApiV1ProjectsProjectIdGetError,
  UpdateExistingProjectApiV1ProjectsProjectIdPutData,
  UpdateExistingProjectApiV1ProjectsProjectIdPutResponse,
  UpdateExistingProjectApiV1ProjectsProjectIdPutError,
  GetCurrentProjectApiV1ProjectsCurrentGetData,
  GetCurrentProjectApiV1ProjectsCurrentGetResponse,
  GetCurrentProjectApiV1ProjectsCurrentGetError,
  GetProjectUsageApiV1ProjectsProjectIdUsageGetData,
  GetProjectUsageApiV1ProjectsProjectIdUsageGetResponse,
  GetProjectUsageApiV1ProjectsProjectIdUsageGetError,
  DeleteFileApiV1FilesIdDeleteData,
  DeleteFileApiV1FilesIdDeleteResponse,
  DeleteFileApiV1FilesIdDeleteError,
  GetFileApiV1FilesIdGetData,
  GetFileApiV1FilesIdGetResponse,
  GetFileApiV1FilesIdGetError,
  ListFilesApiV1FilesGetData,
  ListFilesApiV1FilesGetResponse,
  ListFilesApiV1FilesGetError,
  UploadFileApiV1FilesPostData,
  UploadFileApiV1FilesPostResponse,
  UploadFileApiV1FilesPostError,
  GeneratePresignedUrlApiV1FilesPutData,
  GeneratePresignedUrlApiV1FilesPutResponse,
  GeneratePresignedUrlApiV1FilesPutError,
  SyncFilesApiV1FilesSyncPutData,
  SyncFilesApiV1FilesSyncPutResponse,
  SyncFilesApiV1FilesSyncPutError,
  UploadFileFromUrlApiV1FilesUploadFromUrlPutData,
  UploadFileFromUrlApiV1FilesUploadFromUrlPutResponse,
  UploadFileFromUrlApiV1FilesUploadFromUrlPutError,
  ReadFileContentApiV1FilesIdContentGetData,
  ReadFileContentApiV1FilesIdContentGetResponse,
  ReadFileContentApiV1FilesIdContentGetError,
  ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetData,
  ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponse,
  ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetError,
  GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetData,
  GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetError,
  ListFilePagesFiguresApiV1FilesIdPageFiguresGetData,
  ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponse,
  ListFilePagesFiguresApiV1FilesIdPageFiguresGetError,
  ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetData,
  ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponse,
  ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetError,
  GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetData,
  GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetError,
  SearchPipelinesApiV1PipelinesGetData,
  SearchPipelinesApiV1PipelinesGetResponse,
  SearchPipelinesApiV1PipelinesGetError,
  CreatePipelineApiV1PipelinesPostData,
  CreatePipelineApiV1PipelinesPostResponse,
  CreatePipelineApiV1PipelinesPostError,
  UpsertPipelineApiV1PipelinesPutData,
  UpsertPipelineApiV1PipelinesPutResponse,
  UpsertPipelineApiV1PipelinesPutError,
  DeletePipelineApiV1PipelinesPipelineIdDeleteData,
  DeletePipelineApiV1PipelinesPipelineIdDeleteResponse,
  DeletePipelineApiV1PipelinesPipelineIdDeleteError,
  GetPipelineApiV1PipelinesPipelineIdGetData,
  GetPipelineApiV1PipelinesPipelineIdGetResponse,
  GetPipelineApiV1PipelinesPipelineIdGetError,
  UpdateExistingPipelineApiV1PipelinesPipelineIdPutData,
  UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponse,
  UpdateExistingPipelineApiV1PipelinesPipelineIdPutError,
  GetPipelineStatusApiV1PipelinesPipelineIdStatusGetData,
  GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponse,
  GetPipelineStatusApiV1PipelinesPipelineIdStatusGetError,
  SyncPipelineApiV1PipelinesPipelineIdSyncPostData,
  SyncPipelineApiV1PipelinesPipelineIdSyncPostResponse,
  SyncPipelineApiV1PipelinesPipelineIdSyncPostError,
  CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostData,
  CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponse,
  CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostError,
  ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostData,
  ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponse,
  ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostError,
  CopyPipelineApiV1PipelinesPipelineIdCopyPostData,
  CopyPipelineApiV1PipelinesPipelineIdCopyPostResponse,
  CopyPipelineApiV1PipelinesPipelineIdCopyPostError,
  ListPipelineFilesApiV1PipelinesPipelineIdFilesGetData,
  ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponse,
  ListPipelineFilesApiV1PipelinesPipelineIdFilesGetError,
  AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutData,
  AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponse,
  AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutError,
  ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetData,
  ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponse,
  ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetError,
  GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetData,
  GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponse,
  GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetError,
  GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetData,
  GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponse,
  GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetError,
  DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteData,
  DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponse,
  DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteError,
  UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutData,
  UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponse,
  UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutError,
  DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteData,
  DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponse,
  DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteError,
  ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutData,
  ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponse,
  ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutError,
  ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetData,
  ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponse,
  ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetError,
  AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutData,
  AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponse,
  AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutError,
  DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteData,
  DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponse,
  DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteError,
  UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutData,
  UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponse,
  UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutError,
  SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostData,
  SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponse,
  SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostError,
  GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetData,
  GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponse,
  GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetError,
  RunSearchApiV1PipelinesPipelineIdRetrievePostData,
  RunSearchApiV1PipelinesPipelineIdRetrievePostResponse,
  RunSearchApiV1PipelinesPipelineIdRetrievePostError,
  ListPipelineJobsApiV1PipelinesPipelineIdJobsGetData,
  ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponse,
  ListPipelineJobsApiV1PipelinesPipelineIdJobsGetError,
  GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetData,
  GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponse,
  GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetError,
  GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetData,
  GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponse,
  GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetError,
  ChatApiV1PipelinesPipelineIdChatPostData,
  ChatApiV1PipelinesPipelineIdChatPostError,
  ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetData,
  ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponse,
  ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetError,
  CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostData,
  CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponse,
  CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostError,
  UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutData,
  UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponse,
  UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutError,
  PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetData,
  PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponse,
  PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetError,
  DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteData,
  DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponse,
  DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteError,
  GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetData,
  GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponse,
  GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetError,
  GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetData,
  GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponse,
  GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetError,
  ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetData,
  ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponse,
  ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetError,
  ListRetrieversApiV1RetrieversGetData,
  ListRetrieversApiV1RetrieversGetResponse,
  ListRetrieversApiV1RetrieversGetError,
  CreateRetrieverApiV1RetrieversPostData,
  CreateRetrieverApiV1RetrieversPostResponse,
  CreateRetrieverApiV1RetrieversPostError,
  UpsertRetrieverApiV1RetrieversPutData,
  UpsertRetrieverApiV1RetrieversPutResponse,
  UpsertRetrieverApiV1RetrieversPutError,
  DeleteRetrieverApiV1RetrieversRetrieverIdDeleteData,
  DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponse,
  DeleteRetrieverApiV1RetrieversRetrieverIdDeleteError,
  GetRetrieverApiV1RetrieversRetrieverIdGetData,
  GetRetrieverApiV1RetrieversRetrieverIdGetResponse,
  GetRetrieverApiV1RetrieversRetrieverIdGetError,
  UpdateRetrieverApiV1RetrieversRetrieverIdPutData,
  UpdateRetrieverApiV1RetrieversRetrieverIdPutResponse,
  UpdateRetrieverApiV1RetrieversRetrieverIdPutError,
  RetrieveApiV1RetrieversRetrieverIdRetrievePostData,
  RetrieveApiV1RetrieversRetrieverIdRetrievePostResponse,
  RetrieveApiV1RetrieversRetrieverIdRetrievePostError,
  DirectRetrieveApiV1RetrieversRetrievePostData,
  DirectRetrieveApiV1RetrieversRetrievePostResponse,
  DirectRetrieveApiV1RetrieversRetrievePostError,
  GetJobsApiV1JobsGetData,
  GetJobsApiV1JobsGetResponse,
  GetJobsApiV1JobsGetError,
  ListSupportedModelsApiV1EvalsModelsGetData,
  ListSupportedModelsApiV1EvalsModelsGetResponse,
  ListSupportedModelsApiV1EvalsModelsGetError,
  GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetData,
  GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetError,
  GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetData,
  GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponse,
  ScreenshotApiV1ParsingScreenshotPostData,
  ScreenshotApiV1ParsingScreenshotPostResponse,
  ScreenshotApiV1ParsingScreenshotPostError,
  UploadFileApiV1ParsingUploadPostData,
  UploadFileApiV1ParsingUploadPostResponse,
  UploadFileApiV1ParsingUploadPostError,
  GetJobApiV1ParsingJobJobIdGetData,
  GetJobApiV1ParsingJobJobIdGetResponse,
  GetJobApiV1ParsingJobJobIdGetError,
  GetJobParametersApiV1ParsingJobJobIdParametersGetData,
  GetJobParametersApiV1ParsingJobJobIdParametersGetError,
  GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetData,
  GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetError,
  GetJobTextResultApiV1ParsingJobJobIdResultTextGetData,
  GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponse,
  GetJobTextResultApiV1ParsingJobJobIdResultTextGetError,
  GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetData,
  GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetError,
  GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetData,
  GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetError,
  GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetData,
  GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetError,
  GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetData,
  GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponse,
  GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetError,
  GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetData,
  GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetError,
  GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetData,
  GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetError,
  GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetData,
  GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetError,
  GetJobResultApiV1ParsingJobJobIdResultMarkdownGetData,
  GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponse,
  GetJobResultApiV1ParsingJobJobIdResultMarkdownGetError,
  GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetData,
  GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetError,
  GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetData,
  GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponse,
  GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetError,
  GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetData,
  GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetError,
  GetParsingHistoryResultApiV1ParsingHistoryGetData,
  GetParsingHistoryResultApiV1ParsingHistoryGetResponse,
  GetParsingHistoryResultApiV1ParsingHistoryGetError,
  GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetData,
  GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponse,
  GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetError,
  GetChatAppsApiV1AppsGetData,
  GetChatAppsApiV1AppsGetResponse,
  GetChatAppsApiV1AppsGetError,
  CreateChatAppApiV1AppsPostData,
  CreateChatAppApiV1AppsPostResponse,
  CreateChatAppApiV1AppsPostError,
  DeleteChatAppApiV1AppsIdDeleteData,
  DeleteChatAppApiV1AppsIdDeleteError,
  GetChatAppApiV1AppsIdGetData,
  GetChatAppApiV1AppsIdGetResponse,
  GetChatAppApiV1AppsIdGetError,
  UpdateChatAppApiV1AppsIdPutData,
  UpdateChatAppApiV1AppsIdPutResponse,
  UpdateChatAppApiV1AppsIdPutError,
  ChatWithChatAppApiV1AppsIdChatPostData,
  ChatWithChatAppApiV1AppsIdChatPostError,
  ListDeploymentsApiV1ProjectsProjectIdAgentsGetData,
  ListDeploymentsApiV1ProjectsProjectIdAgentsGetResponse,
  ListDeploymentsApiV1ProjectsProjectIdAgentsGetError,
  SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostData,
  SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponse,
  SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostError,
  ClassifyDocumentsApiV1ClassifierClassifyPostData,
  ClassifyDocumentsApiV1ClassifierClassifyPostResponse,
  ClassifyDocumentsApiV1ClassifierClassifyPostError,
  CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostData,
  CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponse,
  CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostError,
  DowngradePlanApiV1BillingDowngradePlanPostData,
  DowngradePlanApiV1BillingDowngradePlanPostResponse,
  DowngradePlanApiV1BillingDowngradePlanPostError,
  CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostData,
  CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponse,
  CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostError,
  GetMetronomeDashboardApiV1BillingMetronomeDashboardGetData,
  GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponse,
  GetMetronomeDashboardApiV1BillingMetronomeDashboardGetError,
  ListExtractionAgentsApiV1ExtractionExtractionAgentsGetData,
  ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponse,
  ListExtractionAgentsApiV1ExtractionExtractionAgentsGetError,
  CreateExtractionAgentApiV1ExtractionExtractionAgentsPostData,
  CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponse,
  CreateExtractionAgentApiV1ExtractionExtractionAgentsPostError,
  ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostData,
  ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponse,
  ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostError,
  GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostData,
  GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponse,
  GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostError,
  GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetData,
  GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponse,
  GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetError,
  DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteData,
  DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteError,
  GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetData,
  GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponse,
  GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetError,
  UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutData,
  UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponse,
  UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutError,
  ListJobsApiV1ExtractionJobsGetData,
  ListJobsApiV1ExtractionJobsGetResponse,
  ListJobsApiV1ExtractionJobsGetError,
  RunJobApiV1ExtractionJobsPostData,
  RunJobApiV1ExtractionJobsPostResponse,
  RunJobApiV1ExtractionJobsPostError,
  GetJobApiV1ExtractionJobsJobIdGetData,
  GetJobApiV1ExtractionJobsJobIdGetResponse,
  GetJobApiV1ExtractionJobsJobIdGetError,
  RunJobTestUserApiV1ExtractionJobsTestPostData,
  RunJobTestUserApiV1ExtractionJobsTestPostResponse,
  RunJobTestUserApiV1ExtractionJobsTestPostError,
  RunJobOnFileApiV1ExtractionJobsFilePostData,
  RunJobOnFileApiV1ExtractionJobsFilePostResponse,
  RunJobOnFileApiV1ExtractionJobsFilePostError,
  RunBatchJobsApiV1ExtractionJobsBatchPostData,
  RunBatchJobsApiV1ExtractionJobsBatchPostResponse,
  RunBatchJobsApiV1ExtractionJobsBatchPostError,
  GetJobResultApiV1ExtractionJobsJobIdResultGetData,
  GetJobResultApiV1ExtractionJobsJobIdResultGetResponse,
  GetJobResultApiV1ExtractionJobsJobIdResultGetError,
  ListExtractRunsApiV1ExtractionRunsGetData,
  ListExtractRunsApiV1ExtractionRunsGetResponse,
  ListExtractRunsApiV1ExtractionRunsGetError,
  GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetData,
  GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponse,
  GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetError,
  GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetData,
  GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponse,
  GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetError,
  DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteData,
  DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteError,
  GetRunApiV1ExtractionRunsRunIdGetData,
  GetRunApiV1ExtractionRunsRunIdGetResponse,
  GetRunApiV1ExtractionRunsRunIdGetError,
  CreateReportApiV1ReportsPostData,
  CreateReportApiV1ReportsPostResponse,
  CreateReportApiV1ReportsPostError,
  ListReportsApiV1ReportsListGetData,
  ListReportsApiV1ReportsListGetResponse,
  ListReportsApiV1ReportsListGetError,
  DeleteReportApiV1ReportsReportIdDeleteData,
  DeleteReportApiV1ReportsReportIdDeleteError,
  GetReportApiV1ReportsReportIdGetData,
  GetReportApiV1ReportsReportIdGetResponse,
  GetReportApiV1ReportsReportIdGetError,
  UpdateReportApiV1ReportsReportIdPatchData,
  UpdateReportApiV1ReportsReportIdPatchResponse,
  UpdateReportApiV1ReportsReportIdPatchError,
  UpdateReportMetadataApiV1ReportsReportIdPostData,
  UpdateReportMetadataApiV1ReportsReportIdPostResponse,
  UpdateReportMetadataApiV1ReportsReportIdPostError,
  GetReportPlanApiV1ReportsReportIdPlanGetData,
  GetReportPlanApiV1ReportsReportIdPlanGetResponse,
  GetReportPlanApiV1ReportsReportIdPlanGetError,
  UpdateReportPlanApiV1ReportsReportIdPlanPatchData,
  UpdateReportPlanApiV1ReportsReportIdPlanPatchResponse,
  UpdateReportPlanApiV1ReportsReportIdPlanPatchError,
  GetReportEventsApiV1ReportsReportIdEventsGetData,
  GetReportEventsApiV1ReportsReportIdEventsGetResponse,
  GetReportEventsApiV1ReportsReportIdEventsGetError,
  GetReportMetadataApiV1ReportsReportIdMetadataGetData,
  GetReportMetadataApiV1ReportsReportIdMetadataGetResponse,
  GetReportMetadataApiV1ReportsReportIdMetadataGetError,
  SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostData,
  SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponse,
  SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostError,
  RestartReportApiV1ReportsReportIdRestartPostData,
  RestartReportApiV1ReportsReportIdRestartPostError,
  ListBatchesApiV1BetaBatchesGetData,
  ListBatchesApiV1BetaBatchesGetResponse,
  ListBatchesApiV1BetaBatchesGetError,
  CreateBatchApiV1BetaBatchesPostData,
  CreateBatchApiV1BetaBatchesPostResponse,
  CreateBatchApiV1BetaBatchesPostError,
  GetBatchApiV1BetaBatchesBatchIdGetData,
  GetBatchApiV1BetaBatchesBatchIdGetResponse,
  GetBatchApiV1BetaBatchesBatchIdGetError,
  DeleteAgentDataApiV1BetaAgentDataItemIdDeleteData,
  DeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponse,
  DeleteAgentDataApiV1BetaAgentDataItemIdDeleteError,
  GetAgentDataApiV1BetaAgentDataItemIdGetData,
  GetAgentDataApiV1BetaAgentDataItemIdGetResponse,
  GetAgentDataApiV1BetaAgentDataItemIdGetError,
  UpdateAgentDataApiV1BetaAgentDataItemIdPutData,
  UpdateAgentDataApiV1BetaAgentDataItemIdPutResponse,
  UpdateAgentDataApiV1BetaAgentDataItemIdPutError,
  CreateAgentDataApiV1BetaAgentDataPostData,
  CreateAgentDataApiV1BetaAgentDataPostResponse,
  CreateAgentDataApiV1BetaAgentDataPostError,
  SearchAgentDataApiV1BetaAgentDataSearchPostData,
  SearchAgentDataApiV1BetaAgentDataSearchPostResponse,
  SearchAgentDataApiV1BetaAgentDataSearchPostError,
  AggregateAgentDataApiV1BetaAgentDataAggregatePostData,
  AggregateAgentDataApiV1BetaAgentDataAggregatePostResponse,
  AggregateAgentDataApiV1BetaAgentDataAggregatePostError,
  GetJobImageResultApiParsingJobJobIdResultImageNameGetData,
  GetJobImageResultApiParsingJobJobIdResultImageNameGetError,
  GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetData,
  GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponse,
  ScreenshotApiParsingScreenshotPostData,
  ScreenshotApiParsingScreenshotPostResponse,
  ScreenshotApiParsingScreenshotPostError,
  UploadFileApiParsingUploadPostData,
  UploadFileApiParsingUploadPostResponse,
  UploadFileApiParsingUploadPostError,
  GetJobApiParsingJobJobIdGetData,
  GetJobApiParsingJobJobIdGetResponse,
  GetJobApiParsingJobJobIdGetError,
  GetJobParametersApiParsingJobJobIdParametersGetData,
  GetJobParametersApiParsingJobJobIdParametersGetError,
  GetParsingJobDetailsApiParsingJobJobIdDetailsGetData,
  GetParsingJobDetailsApiParsingJobJobIdDetailsGetError,
  GetJobTextResultApiParsingJobJobIdResultTextGetData,
  GetJobTextResultApiParsingJobJobIdResultTextGetResponse,
  GetJobTextResultApiParsingJobJobIdResultTextGetError,
  GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetData,
  GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetError,
  GetJobRawTextResultApiParsingJobJobIdResultPdfGetData,
  GetJobRawTextResultApiParsingJobJobIdResultPdfGetError,
  GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetData,
  GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetError,
  GetJobStructuredResultApiParsingJobJobIdResultStructuredGetData,
  GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponse,
  GetJobStructuredResultApiParsingJobJobIdResultStructuredGetError,
  GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetData,
  GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetError,
  GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetData,
  GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetError,
  GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetData,
  GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetError,
  GetJobResultApiParsingJobJobIdResultMarkdownGetData,
  GetJobResultApiParsingJobJobIdResultMarkdownGetResponse,
  GetJobResultApiParsingJobJobIdResultMarkdownGetError,
  GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetData,
  GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetError,
  GetJobJsonResultApiParsingJobJobIdResultJsonGetData,
  GetJobJsonResultApiParsingJobJobIdResultJsonGetResponse,
  GetJobJsonResultApiParsingJobJobIdResultJsonGetError,
  GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetData,
  GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetError,
  GetParsingHistoryResultApiParsingHistoryGetData,
  GetParsingHistoryResultApiParsingHistoryGetResponse,
  GetParsingHistoryResultApiParsingHistoryGetError,
  GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetData,
  GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponse,
  GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List Keys
 * List API Keys for a user.
 */
export const listKeysApiV1ApiKeysGet = <ThrowOnError extends boolean = false>(
  options?: Options<ListKeysApiV1ApiKeysGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListKeysApiV1ApiKeysGetResponse,
    ListKeysApiV1ApiKeysGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/api-keys",
    ...options,
  });
};

/**
 * Generate Key
 * Generate a new API Key.
 */
export const generateKeyApiV1ApiKeysPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GenerateKeyApiV1ApiKeysPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GenerateKeyApiV1ApiKeysPostResponse,
    GenerateKeyApiV1ApiKeysPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/api-keys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Api Key
 * Delete an API Key by ID.
 */
export const deleteApiKeyApiV1ApiKeysApiKeyIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponse,
    DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/api-keys/{api_key_id}",
    ...options,
  });
};

/**
 * Update Existing Api Key
 * Update name of an existing API Key.
 */
export const updateExistingApiKeyApiV1ApiKeysApiKeyIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponse,
    UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/api-keys/{api_key_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Validate Embedding Connection
 * Validate an embedding connection.
 *
 * Args:
 * embedding_config: The embedding configuration to validate.
 * pipeline_id: If provided, the embedding connection will be validated for the pipeline.
 * user: The user to validate the embedding connection for.
 * db: The database session.
 *
 * Returns:
 * A BaseConnectionValidation object indicating the result of the validation.
 */
export const validateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponse,
      ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/validate-integrations/validate-embedding-connection",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * Validate Data Source Connection
 * Validate a data source connection.
 */
export const validateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponse,
      ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/validate-integrations/validate-data-source-connection",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * Validate Data Sink Connection
 * Validate a data sink connection.
 */
export const validateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponse,
      ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/validate-integrations/validate-data-sink-connection",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * List Data Sinks
 * List data sinks for a given project.
 */
export const listDataSinksApiV1DataSinksGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListDataSinksApiV1DataSinksGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListDataSinksApiV1DataSinksGetResponse,
    ListDataSinksApiV1DataSinksGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sinks",
    ...options,
  });
};

/**
 * Create Data Sink
 * Create a new data sink.
 */
export const createDataSinkApiV1DataSinksPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateDataSinkApiV1DataSinksPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDataSinkApiV1DataSinksPostResponse,
    CreateDataSinkApiV1DataSinksPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sinks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upsert Data Sink
 * Upserts a data sink.
 * Updates if a data sink with the same name and project_id already exists. Otherwise, creates a new data sink.
 */
export const upsertDataSinkApiV1DataSinksPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpsertDataSinkApiV1DataSinksPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpsertDataSinkApiV1DataSinksPutResponse,
    UpsertDataSinkApiV1DataSinksPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sinks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Data Sink
 * Delete a data sink by ID.
 */
export const deleteDataSinkApiV1DataSinksDataSinkIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteDataSinkApiV1DataSinksDataSinkIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponse,
    DeleteDataSinkApiV1DataSinksDataSinkIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sinks/{data_sink_id}",
    ...options,
  });
};

/**
 * Get Data Sink
 * Get a data sink by ID.
 */
export const getDataSinkApiV1DataSinksDataSinkIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDataSinkApiV1DataSinksDataSinkIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDataSinkApiV1DataSinksDataSinkIdGetResponse,
    GetDataSinkApiV1DataSinksDataSinkIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sinks/{data_sink_id}",
    ...options,
  });
};

/**
 * Update Data Sink
 * Update a data sink by ID.
 */
export const updateDataSinkApiV1DataSinksDataSinkIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateDataSinkApiV1DataSinksDataSinkIdPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateDataSinkApiV1DataSinksDataSinkIdPutResponse,
    UpdateDataSinkApiV1DataSinksDataSinkIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sinks/{data_sink_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Data Sources
 * List data sources for a given project.
 * If project_id is not provided, uses the default project.
 */
export const listDataSourcesApiV1DataSourcesGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListDataSourcesApiV1DataSourcesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListDataSourcesApiV1DataSourcesGetResponse,
    ListDataSourcesApiV1DataSourcesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sources",
    ...options,
  });
};

/**
 * Create Data Source
 * Create a new data source.
 */
export const createDataSourceApiV1DataSourcesPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateDataSourceApiV1DataSourcesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDataSourceApiV1DataSourcesPostResponse,
    CreateDataSourceApiV1DataSourcesPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upsert Data Source
 * Upserts a data source.
 * Updates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.
 */
export const upsertDataSourceApiV1DataSourcesPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpsertDataSourceApiV1DataSourcesPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpsertDataSourceApiV1DataSourcesPutResponse,
    UpsertDataSourceApiV1DataSourcesPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Data Source
 * Delete a data source by ID.
 */
export const deleteDataSourceApiV1DataSourcesDataSourceIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponse,
    DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sources/{data_source_id}",
    ...options,
  });
};

/**
 * Get Data Source
 * Get a data source by ID.
 */
export const getDataSourceApiV1DataSourcesDataSourceIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetDataSourceApiV1DataSourcesDataSourceIdGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDataSourceApiV1DataSourcesDataSourceIdGetResponse,
    GetDataSourceApiV1DataSourcesDataSourceIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sources/{data_source_id}",
    ...options,
  });
};

/**
 * Update Data Source
 * Update a data source by ID.
 */
export const updateDataSourceApiV1DataSourcesDataSourceIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateDataSourceApiV1DataSourcesDataSourceIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponse,
    UpdateDataSourceApiV1DataSourcesDataSourceIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/data-sources/{data_source_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Embedding Model Configs
 */
export const listEmbeddingModelConfigsApiV1EmbeddingModelConfigsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponse,
    ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/embedding-model-configs",
    ...options,
  });
};

/**
 * Create a new Embedding Model Configuration
 * Create a new embedding model configuration within a specified project.
 */
export const createEmbeddingModelConfigApiV1EmbeddingModelConfigsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponse,
    CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/embedding-model-configs",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upsert Embedding Model Config
 * Upserts an embedding model config.
 * Updates if an embedding model config with the same name and project_id already exists. Otherwise, creates a new embedding model config.
 */
export const upsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponse,
    UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/embedding-model-configs",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Embedding Model Config
 * Delete an embedding model config by ID.
 */
export const deleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDelete =
  <ThrowOnError extends boolean = false>(
    options: Options<
      DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponse,
      DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/embedding-model-configs/{embedding_model_config_id}",
      ...options,
    });
  };

/**
 * Update Embedding Model Config
 * Update an embedding model config by ID.
 */
export const updateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPut =
  <ThrowOnError extends boolean = false>(
    options: Options<
      UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponse,
      UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/embedding-model-configs/{embedding_model_config_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * List Organizations
 * List organizations for a user.
 */
export const listOrganizationsApiV1OrganizationsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListOrganizationsApiV1OrganizationsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListOrganizationsApiV1OrganizationsGetResponse,
    ListOrganizationsApiV1OrganizationsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations",
    ...options,
  });
};

/**
 * Create Organization
 * Create a new organization.
 */
export const createOrganizationApiV1OrganizationsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateOrganizationApiV1OrganizationsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateOrganizationApiV1OrganizationsPostResponse,
    CreateOrganizationApiV1OrganizationsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upsert Organization
 * Upsert a new organization.
 */
export const upsertOrganizationApiV1OrganizationsPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpsertOrganizationApiV1OrganizationsPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpsertOrganizationApiV1OrganizationsPutResponse,
    UpsertOrganizationApiV1OrganizationsPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Default Organization
 * Get the default organization for the user.
 */
export const getDefaultOrganizationApiV1OrganizationsDefaultGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetDefaultOrganizationApiV1OrganizationsDefaultGetData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDefaultOrganizationApiV1OrganizationsDefaultGetResponse,
    GetDefaultOrganizationApiV1OrganizationsDefaultGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/default",
    ...options,
  });
};

/**
 * Set Default Organization
 * Set the default organization for the user.
 */
export const setDefaultOrganizationApiV1OrganizationsDefaultPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SetDefaultOrganizationApiV1OrganizationsDefaultPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    SetDefaultOrganizationApiV1OrganizationsDefaultPutResponse,
    SetDefaultOrganizationApiV1OrganizationsDefaultPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/default",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Organization
 * Delete an organization by ID.
 */
export const deleteOrganizationApiV1OrganizationsOrganizationIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponse,
    DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/{organization_id}",
    ...options,
  });
};

/**
 * Get Organization
 * Get an organization by ID.
 */
export const getOrganizationApiV1OrganizationsOrganizationIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetOrganizationApiV1OrganizationsOrganizationIdGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetOrganizationApiV1OrganizationsOrganizationIdGetResponse,
    GetOrganizationApiV1OrganizationsOrganizationIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/{organization_id}",
    ...options,
  });
};

/**
 * Update Organization
 * Update an existing organization.
 */
export const updateOrganizationApiV1OrganizationsOrganizationIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateOrganizationApiV1OrganizationsOrganizationIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse,
    UpdateOrganizationApiV1OrganizationsOrganizationIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/{organization_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Organization Usage
 * Get usage for a specific organization.
 */
export const getOrganizationUsageApiV1OrganizationsOrganizationIdUsageGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponse,
    GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/{organization_id}/usage",
    ...options,
  });
};

/**
 * List Organization Users
 * Get all users in an organization.
 */
export const listOrganizationUsersApiV1OrganizationsOrganizationIdUsersGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponse,
    ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/{organization_id}/users",
    ...options,
  });
};

/**
 * Add Users To Organization
 * Add a user to an organization.
 */
export const addUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponse,
    AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/{organization_id}/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove Users From Organization
 * Remove users from an organization.
 */
export const removeUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDelete =
  <ThrowOnError extends boolean = false>(
    options: Options<
      RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponse,
      RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/organizations/{organization_id}/users/{member_user_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * @deprecated
 * Batch Remove Users From Organization
 * Remove a batch of users from an organization.
 */
export const batchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePut =
  <ThrowOnError extends boolean = false>(
    options: Options<
      BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponse,
      BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/organizations/{organization_id}/users/remove",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * List Roles
 * List all roles in an organization.
 */
export const listRolesApiV1OrganizationsOrganizationIdRolesGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListRolesApiV1OrganizationsOrganizationIdRolesGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListRolesApiV1OrganizationsOrganizationIdRolesGetResponse,
    ListRolesApiV1OrganizationsOrganizationIdRolesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/{organization_id}/roles",
    ...options,
  });
};

/**
 * Get User Role
 * Get the role of a user in an organization.
 */
export const getUserRoleApiV1OrganizationsOrganizationIdUsersRolesGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponse,
    GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organizations/{organization_id}/users/roles",
    ...options,
  });
};

/**
 * Assign Role To User In Organization
 * Assign a role to a user in an organization.
 */
export const assignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPut =
  <ThrowOnError extends boolean = false>(
    options: Options<
      AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponse,
      AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/organizations/{organization_id}/users/roles",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * List Projects By User
 * List all projects for a user in an organization.
 */
export const listProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponse,
      ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects",
      ...options,
    });
  };

/**
 * Add User To Project
 * Add a user to a project.
 */
export const addUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPut =
  <ThrowOnError extends boolean = false>(
    options: Options<
      AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      unknown,
      AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects",
      ...options,
    });
  };

/**
 * Remove User From Project
 * Remove a user from a project.
 */
export const removeUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDelete =
  <ThrowOnError extends boolean = false>(
    options: Options<
      RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects/{project_id}",
      ...options,
    });
  };

/**
 * List Projects
 * List projects or get one by name
 */
export const listProjectsApiV1ProjectsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListProjectsApiV1ProjectsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListProjectsApiV1ProjectsGetResponse,
    ListProjectsApiV1ProjectsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects",
    ...options,
  });
};

/**
 * Create Project
 * Create a new project.
 */
export const createProjectApiV1ProjectsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateProjectApiV1ProjectsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectApiV1ProjectsPostResponse,
    CreateProjectApiV1ProjectsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upsert Project
 * Upsert a project.
 * Updates if a project with the same name already exists. Otherwise, creates a new project.
 */
export const upsertProjectApiV1ProjectsPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpsertProjectApiV1ProjectsPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpsertProjectApiV1ProjectsPutResponse,
    UpsertProjectApiV1ProjectsPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Project
 * Delete a project by ID.
 */
export const deleteProjectApiV1ProjectsProjectIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteProjectApiV1ProjectsProjectIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectApiV1ProjectsProjectIdDeleteResponse,
    DeleteProjectApiV1ProjectsProjectIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects/{project_id}",
    ...options,
  });
};

/**
 * Get Project
 * Get a project by ID.
 */
export const getProjectApiV1ProjectsProjectIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetProjectApiV1ProjectsProjectIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectApiV1ProjectsProjectIdGetResponse,
    GetProjectApiV1ProjectsProjectIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects/{project_id}",
    ...options,
  });
};

/**
 * Update Existing Project
 * Update an existing project.
 */
export const updateExistingProjectApiV1ProjectsProjectIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateExistingProjectApiV1ProjectsProjectIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateExistingProjectApiV1ProjectsProjectIdPutResponse,
    UpdateExistingProjectApiV1ProjectsProjectIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects/{project_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Current Project
 * Get the current project.
 */
export const getCurrentProjectApiV1ProjectsCurrentGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetCurrentProjectApiV1ProjectsCurrentGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentProjectApiV1ProjectsCurrentGetResponse,
    GetCurrentProjectApiV1ProjectsCurrentGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects/current",
    ...options,
  });
};

/**
 * Get Project Usage
 * Get usage for a project
 */
export const getProjectUsageApiV1ProjectsProjectIdUsageGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetProjectUsageApiV1ProjectsProjectIdUsageGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectUsageApiV1ProjectsProjectIdUsageGetResponse,
    GetProjectUsageApiV1ProjectsProjectIdUsageGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects/{project_id}/usage",
    ...options,
  });
};

/**
 * Delete File
 * Delete the file from S3.
 */
export const deleteFileApiV1FilesIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteFileApiV1FilesIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFileApiV1FilesIdDeleteResponse,
    DeleteFileApiV1FilesIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/{id}",
    ...options,
  });
};

/**
 * Get File
 * Read File metadata objects.
 */
export const getFileApiV1FilesIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetFileApiV1FilesIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFileApiV1FilesIdGetResponse,
    GetFileApiV1FilesIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/{id}",
    ...options,
  });
};

/**
 * List Files
 * Read File metadata objects.
 */
export const listFilesApiV1FilesGet = <ThrowOnError extends boolean = false>(
  options?: Options<ListFilesApiV1FilesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListFilesApiV1FilesGetResponse,
    ListFilesApiV1FilesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files",
    ...options,
  });
};

/**
 * Upload File
 * Upload a file to S3.
 */
export const uploadFileApiV1FilesPost = <ThrowOnError extends boolean = false>(
  options: Options<UploadFileApiV1FilesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadFileApiV1FilesPostResponse,
    UploadFileApiV1FilesPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Generate Presigned Url
 * Create a presigned url for uploading a file.
 */
export const generatePresignedUrlApiV1FilesPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GeneratePresignedUrlApiV1FilesPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    GeneratePresignedUrlApiV1FilesPutResponse,
    GeneratePresignedUrlApiV1FilesPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sync Files
 * Sync Files API against file contents uploaded via S3 presigned urls.
 */
export const syncFilesApiV1FilesSyncPut = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SyncFilesApiV1FilesSyncPutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<
    SyncFilesApiV1FilesSyncPutResponse,
    SyncFilesApiV1FilesSyncPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/sync",
    ...options,
  });
};

/**
 * Upload File From Url
 * Upload a file to the project from a URL.
 *
 * If name is ommitted in the request payload, the file name will be
 * extracted from the response Content-Disposition header if available
 * or otherwise it will be derived from the URL path.
 *
 * If providing the name in the request payload, always suffix the
 * file extension in the name if available.
 */
export const uploadFileFromUrlApiV1FilesUploadFromUrlPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UploadFileFromUrlApiV1FilesUploadFromUrlPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UploadFileFromUrlApiV1FilesUploadFromUrlPutResponse,
    UploadFileFromUrlApiV1FilesUploadFromUrlPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/upload_from_url",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Read File Content
 * Returns a presigned url to read the file content.
 */
export const readFileContentApiV1FilesIdContentGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReadFileContentApiV1FilesIdContentGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadFileContentApiV1FilesIdContentGetResponse,
    ReadFileContentApiV1FilesIdContentGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/{id}/content",
    ...options,
  });
};

/**
 * List File Page Screenshots
 * List metadata for all screenshots of pages from a file.
 */
export const listFilePageScreenshotsApiV1FilesIdPageScreenshotsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponse,
    ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/{id}/page_screenshots",
    ...options,
  });
};

/**
 * Get File Page Screenshot
 * Get screenshot of a page from a file.
 */
export const getFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/{id}/page_screenshots/{page_index}",
    ...options,
  });
};

/**
 * List File Pages Figures
 */
export const listFilePagesFiguresApiV1FilesIdPageFiguresGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListFilePagesFiguresApiV1FilesIdPageFiguresGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponse,
    ListFilePagesFiguresApiV1FilesIdPageFiguresGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/{id}/page-figures",
    ...options,
  });
};

/**
 * List File Page Figures
 */
export const listFilePageFiguresApiV1FilesIdPageFiguresPageIndexGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponse,
    ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/{id}/page-figures/{page_index}",
    ...options,
  });
};

/**
 * Get File Page Figure
 */
export const getFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/files/{id}/page-figures/{page_index}/{figure_name}",
    ...options,
  });
};

/**
 * Search Pipelines
 * Search for pipelines by various parameters.
 */
export const searchPipelinesApiV1PipelinesGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SearchPipelinesApiV1PipelinesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SearchPipelinesApiV1PipelinesGetResponse,
    SearchPipelinesApiV1PipelinesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines",
    ...options,
  });
};

/**
 * Create Pipeline
 * Create a new pipeline for a project.
 */
export const createPipelineApiV1PipelinesPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreatePipelineApiV1PipelinesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePipelineApiV1PipelinesPostResponse,
    CreatePipelineApiV1PipelinesPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upsert Pipeline
 * Upsert a pipeline for a project.
 * Updates if a pipeline with the same name and project_id already exists. Otherwise, creates a new pipeline.
 */
export const upsertPipelineApiV1PipelinesPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpsertPipelineApiV1PipelinesPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpsertPipelineApiV1PipelinesPutResponse,
    UpsertPipelineApiV1PipelinesPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Pipeline
 * Delete a pipeline by ID.
 */
export const deletePipelineApiV1PipelinesPipelineIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeletePipelineApiV1PipelinesPipelineIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePipelineApiV1PipelinesPipelineIdDeleteResponse,
    DeletePipelineApiV1PipelinesPipelineIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}",
    ...options,
  });
};

/**
 * Get Pipeline
 * Get a pipeline by ID for a given project.
 */
export const getPipelineApiV1PipelinesPipelineIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetPipelineApiV1PipelinesPipelineIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPipelineApiV1PipelinesPipelineIdGetResponse,
    GetPipelineApiV1PipelinesPipelineIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}",
    ...options,
  });
};

/**
 * Update Existing Pipeline
 * Update an existing pipeline for a project.
 */
export const updateExistingPipelineApiV1PipelinesPipelineIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateExistingPipelineApiV1PipelinesPipelineIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponse,
    UpdateExistingPipelineApiV1PipelinesPipelineIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Pipeline Status
 * Get the status of a pipeline by ID.
 */
export const getPipelineStatusApiV1PipelinesPipelineIdStatusGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetPipelineStatusApiV1PipelinesPipelineIdStatusGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponse,
    GetPipelineStatusApiV1PipelinesPipelineIdStatusGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/status",
    ...options,
  });
};

/**
 * Sync Pipeline
 * Run ingestion for the pipeline by incrementally updating the data-sink with upstream changes from data-sources & files.
 */
export const syncPipelineApiV1PipelinesPipelineIdSyncPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SyncPipelineApiV1PipelinesPipelineIdSyncPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    SyncPipelineApiV1PipelinesPipelineIdSyncPostResponse,
    SyncPipelineApiV1PipelinesPipelineIdSyncPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/sync",
    ...options,
  });
};

/**
 * Cancel Pipeline Sync
 */
export const cancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponse,
    CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/sync/cancel",
    ...options,
  });
};

/**
 * Force Delete Pipeline
 */
export const forceDeletePipelineApiV1PipelinesPipelineIdForceDeletePost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponse,
    ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/force-delete",
    ...options,
  });
};

/**
 * Copy Pipeline
 * Copy a pipeline by ID.
 */
export const copyPipelineApiV1PipelinesPipelineIdCopyPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    CopyPipelineApiV1PipelinesPipelineIdCopyPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    CopyPipelineApiV1PipelinesPipelineIdCopyPostResponse,
    CopyPipelineApiV1PipelinesPipelineIdCopyPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/copy",
    ...options,
  });
};

/**
 * @deprecated
 * List Pipeline Files
 * Get files for a pipeline.
 */
export const listPipelineFilesApiV1PipelinesPipelineIdFilesGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListPipelineFilesApiV1PipelinesPipelineIdFilesGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponse,
    ListPipelineFilesApiV1PipelinesPipelineIdFilesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/files",
    ...options,
  });
};

/**
 * Add Files To Pipeline Api
 * Add files to a pipeline.
 */
export const addFilesToPipelineApiApiV1PipelinesPipelineIdFilesPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponse,
    AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/files",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * @deprecated
 * List Pipeline Files2
 * Get files for a pipeline.
 */
export const listPipelineFiles2ApiV1PipelinesPipelineIdFiles2Get = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponse,
    ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/files2",
    ...options,
  });
};

/**
 * Get Pipeline File Status Counts
 * Get files for a pipeline.
 */
export const getPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponse,
      GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/files/status-counts",
      ...options,
    });
  };

/**
 * Get Pipeline File Status
 * Get status of a file for a pipeline.
 */
export const getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponse,
      GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}/status",
      ...options,
    });
  };

/**
 * Delete Pipeline File
 * Delete a file from a pipeline.
 */
export const deletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponse,
    DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}",
    ...options,
  });
};

/**
 * Update Pipeline File
 * Update a file for a pipeline.
 */
export const updatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponse,
    UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Pipeline Files Metadata
 * Delete metadata for all files in a pipeline.
 */
export const deletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDelete =
  <ThrowOnError extends boolean = false>(
    options: Options<
      DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponse,
      DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/metadata",
      ...options,
    });
  };

/**
 * Import Pipeline Metadata
 * Import metadata for a pipeline.
 */
export const importPipelineMetadataApiV1PipelinesPipelineIdMetadataPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponse,
    ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/metadata",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * List Pipeline Data Sources
 * Get data sources for a pipeline.
 */
export const listPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponse,
    ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/data-sources",
    ...options,
  });
};

/**
 * Add Data Sources To Pipeline
 * Add data sources to a pipeline.
 */
export const addDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponse,
    AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/data-sources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Pipeline Data Source
 * Delete a data source from a pipeline.
 */
export const deletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDelete =
  <ThrowOnError extends boolean = false>(
    options: Options<
      DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponse,
      DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}",
      ...options,
    });
  };

/**
 * Update Pipeline Data Source
 * Update the configuration of a data source in a pipeline.
 */
export const updatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPut =
  <ThrowOnError extends boolean = false>(
    options: Options<
      UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponse,
      UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * Sync Pipeline Data Source
 * Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.
 */
export const syncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponse,
      SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/sync",
      ...options,
    });
  };

/**
 * Get Pipeline Data Source Status
 * Get the status of a data source for a pipeline.
 */
export const getPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponse,
      GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/status",
      ...options,
    });
  };

/**
 * Run Search
 * Get retrieval results for a managed pipeline and a query
 */
export const runSearchApiV1PipelinesPipelineIdRetrievePost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    RunSearchApiV1PipelinesPipelineIdRetrievePostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    RunSearchApiV1PipelinesPipelineIdRetrievePostResponse,
    RunSearchApiV1PipelinesPipelineIdRetrievePostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/retrieve",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Pipeline Jobs
 * Get jobs for a pipeline.
 */
export const listPipelineJobsApiV1PipelinesPipelineIdJobsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListPipelineJobsApiV1PipelinesPipelineIdJobsGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponse,
    ListPipelineJobsApiV1PipelinesPipelineIdJobsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/jobs",
    ...options,
  });
};

/**
 * Get Pipeline Job
 * Get a job for a pipeline.
 */
export const getPipelineJobApiV1PipelinesPipelineIdJobsJobIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponse,
    GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/jobs/{job_id}",
    ...options,
  });
};

/**
 * Get Playground Session
 * Get a playground session for a user and pipeline.
 */
export const getPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponse,
      GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/playground-session",
      ...options,
    });
  };

/**
 * Chat
 * Make a retrieval query + chat completion for a managed pipeline.
 */
export const chatApiV1PipelinesPipelineIdChatPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ChatApiV1PipelinesPipelineIdChatPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    ChatApiV1PipelinesPipelineIdChatPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/chat",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Pipeline Documents
 * Return a list of documents for a pipeline.
 */
export const listPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponse,
    ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{pipeline_id}/documents",
    ...options,
  });
};

/**
 * Create Batch Pipeline Documents
 * Batch create documents for a pipeline.
 */
export const createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponse,
      CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/documents",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * Upsert Batch Pipeline Documents
 * Batch create or update a document for a pipeline.
 */
export const upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut =
  <ThrowOnError extends boolean = false>(
    options: Options<
      UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponse,
      UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/documents",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * Paginated List Pipeline Documents
 * Return a list of documents for a pipeline.
 */
export const paginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponse,
      PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/documents/paginated",
      ...options,
    });
  };

/**
 * Delete Pipeline Document
 * Delete a document from a pipeline.
 * Initiates an async job that will:
 * 1. Delete vectors from the vector store
 * 2. Delete the document from MongoDB after vectors are successfully deleted
 */
export const deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete =
  <ThrowOnError extends boolean = false>(
    options: Options<
      DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponse,
      DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}",
      ...options,
    });
  };

/**
 * Get Pipeline Document
 * Return a single document for a pipeline.
 */
export const getPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponse,
      GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}",
      ...options,
    });
  };

/**
 * Get Pipeline Document Status
 * Return a single document for a pipeline.
 */
export const getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponse,
      GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/status",
      ...options,
    });
  };

/**
 * List Pipeline Document Chunks
 * Return a list of chunks for a pipeline document.
 */
export const listPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponse,
      ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/chunks",
      ...options,
    });
  };

/**
 * List Retrievers
 * List Retrievers for a project.
 */
export const listRetrieversApiV1RetrieversGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListRetrieversApiV1RetrieversGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListRetrieversApiV1RetrieversGetResponse,
    ListRetrieversApiV1RetrieversGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/retrievers",
    ...options,
  });
};

/**
 * Create Retriever
 * Create a new Retriever.
 */
export const createRetrieverApiV1RetrieversPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateRetrieverApiV1RetrieversPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateRetrieverApiV1RetrieversPostResponse,
    CreateRetrieverApiV1RetrieversPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/retrievers",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upsert Retriever
 * Upsert a new Retriever.
 */
export const upsertRetrieverApiV1RetrieversPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpsertRetrieverApiV1RetrieversPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpsertRetrieverApiV1RetrieversPutResponse,
    UpsertRetrieverApiV1RetrieversPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/retrievers",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Retriever
 * Delete a Retriever by ID.
 */
export const deleteRetrieverApiV1RetrieversRetrieverIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteRetrieverApiV1RetrieversRetrieverIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponse,
    DeleteRetrieverApiV1RetrieversRetrieverIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/retrievers/{retriever_id}",
    ...options,
  });
};

/**
 * Get Retriever
 * Get a Retriever by ID.
 */
export const getRetrieverApiV1RetrieversRetrieverIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetRetrieverApiV1RetrieversRetrieverIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRetrieverApiV1RetrieversRetrieverIdGetResponse,
    GetRetrieverApiV1RetrieversRetrieverIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/retrievers/{retriever_id}",
    ...options,
  });
};

/**
 * Update Retriever
 * Update an existing Retriever.
 */
export const updateRetrieverApiV1RetrieversRetrieverIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateRetrieverApiV1RetrieversRetrieverIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateRetrieverApiV1RetrieversRetrieverIdPutResponse,
    UpdateRetrieverApiV1RetrieversRetrieverIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/retrievers/{retriever_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Retrieve
 * Retrieve data using a Retriever.
 */
export const retrieveApiV1RetrieversRetrieverIdRetrievePost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    RetrieveApiV1RetrieversRetrieverIdRetrievePostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    RetrieveApiV1RetrieversRetrieverIdRetrievePostResponse,
    RetrieveApiV1RetrieversRetrieverIdRetrievePostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/retrievers/{retriever_id}/retrieve",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Direct Retrieve
 * Retrieve data using specified pipelines without creating a persistent retriever.
 */
export const directRetrieveApiV1RetrieversRetrievePost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DirectRetrieveApiV1RetrieversRetrievePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DirectRetrieveApiV1RetrieversRetrievePostResponse,
    DirectRetrieveApiV1RetrieversRetrievePostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/retrievers/retrieve",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Jobs
 * Get jobs for a project.
 *
 * Note:
 * The include_usage_metrics parameter is deprecated and will be removed in a future version.
 * We've moved to usage v2 and this parameter will no longer return meaningful data.
 */
export const getJobsApiV1JobsGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetJobsApiV1JobsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetJobsApiV1JobsGetResponse,
    GetJobsApiV1JobsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/jobs/",
    ...options,
  });
};

/**
 * List Supported Models
 * List supported models.
 */
export const listSupportedModelsApiV1EvalsModelsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListSupportedModelsApiV1EvalsModelsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListSupportedModelsApiV1EvalsModelsGetResponse,
    ListSupportedModelsApiV1EvalsModelsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/evals/models",
    ...options,
  });
};

/**
 * Get Job Image Result
 * Get a job by id
 */
export const getJobImageResultApiV1ParsingJobJobIdResultImageNameGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/image/{name}",
    ...options,
  });
};

/**
 * Get Supported File Extensions
 * Get a list of supported file extensions
 */
export const getSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGet =
  <ThrowOnError extends boolean = false>(
    options?: Options<
      GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetData,
      ThrowOnError
    >,
  ) => {
    return (options?.client ?? _heyApiClient).get<
      GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponse,
      unknown,
      ThrowOnError
    >({
      url: "/api/v1/parsing/supported_file_extensions",
      ...options,
    });
  };

/**
 * Screenshot
 */
export const screenshotApiV1ParsingScreenshotPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ScreenshotApiV1ParsingScreenshotPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    ScreenshotApiV1ParsingScreenshotPostResponse,
    ScreenshotApiV1ParsingScreenshotPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/screenshot",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Upload File
 */
export const uploadFileApiV1ParsingUploadPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UploadFileApiV1ParsingUploadPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    UploadFileApiV1ParsingUploadPostResponse,
    UploadFileApiV1ParsingUploadPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Get Job
 * Get a job by id
 */
export const getJobApiV1ParsingJobJobIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetJobApiV1ParsingJobJobIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobApiV1ParsingJobJobIdGetResponse,
    GetJobApiV1ParsingJobJobIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}",
    ...options,
  });
};

/**
 * Get Job Parameters
 * Get a job by id
 */
export const getJobParametersApiV1ParsingJobJobIdParametersGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobParametersApiV1ParsingJobJobIdParametersGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobParametersApiV1ParsingJobJobIdParametersGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/parameters",
    ...options,
  });
};

/**
 * Get Parsing Job Details
 * Get a job by id
 */
export const getParsingJobDetailsApiV1ParsingJobJobIdDetailsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/details",
    ...options,
  });
};

/**
 * Get Job Text Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
export const getJobTextResultApiV1ParsingJobJobIdResultTextGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobTextResultApiV1ParsingJobJobIdResultTextGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponse,
    GetJobTextResultApiV1ParsingJobJobIdResultTextGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/text",
    ...options,
  });
};

/**
 * Get Job Raw Text Result Raw
 * Get a job by id
 */
export const getJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/raw/text",
    ...options,
  });
};

/**
 * Get Job Raw Text Result
 * Get a job by id
 */
export const getJobRawTextResultApiV1ParsingJobJobIdResultPdfGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/pdf",
    ...options,
  });
};

/**
 * Get Job Raw Text Result Raw Pdf
 * Get a job by id
 */
export const getJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/raw/pdf",
    ...options,
  });
};

/**
 * Get Job Structured Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
export const getJobStructuredResultApiV1ParsingJobJobIdResultStructuredGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponse,
    GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/structured",
    ...options,
  });
};

/**
 * Get Job Raw Structured Result
 * Get a job by id
 */
export const getJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      unknown,
      GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/parsing/job/{job_id}/result/raw/structured",
      ...options,
    });
  };

/**
 * Get Job Raw Xlsx Result
 * Get a job by id
 */
export const getJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/xlsx",
    ...options,
  });
};

/**
 * Get Job Raw Xlsx Result Raw
 * Get a job by id
 */
export const getJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/raw/xlsx",
    ...options,
  });
};

/**
 * Get Job Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
export const getJobResultApiV1ParsingJobJobIdResultMarkdownGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobResultApiV1ParsingJobJobIdResultMarkdownGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponse,
    GetJobResultApiV1ParsingJobJobIdResultMarkdownGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/markdown",
    ...options,
  });
};

/**
 * Get Job Raw Md Result
 * Get a job by id
 */
export const getJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/raw/markdown",
    ...options,
  });
};

/**
 * Get Job Json Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
export const getJobJsonResultApiV1ParsingJobJobIdResultJsonGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponse,
    GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/json",
    ...options,
  });
};

/**
 * Get Job Json Raw Result
 * Get a job by id
 */
export const getJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/result/raw/json",
    ...options,
  });
};

/**
 * @deprecated
 * Get Parsing History Result
 * Get parsing history for user
 *
 * This endpoint is deprecated.
 * Use /api/v1/jobs/?job_name=parsing&project_id=YOUR_PROJECT_ID instead.
 */
export const getParsingHistoryResultApiV1ParsingHistoryGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetParsingHistoryResultApiV1ParsingHistoryGetData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetParsingHistoryResultApiV1ParsingHistoryGetResponse,
    GetParsingHistoryResultApiV1ParsingHistoryGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/history",
    ...options,
  });
};

/**
 * Generate Presigned Url
 * Generate a presigned URL for a job
 */
export const generatePresignedUrlApiV1ParsingJobJobIdReadFilenameGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponse,
    GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/parsing/job/{job_id}/read/{filename}",
    ...options,
  });
};

/**
 * Get Chat Apps
 */
export const getChatAppsApiV1AppsGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetChatAppsApiV1AppsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetChatAppsApiV1AppsGetResponse,
    GetChatAppsApiV1AppsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/apps/",
    ...options,
  });
};

/**
 * Create Chat App
 * Create a new chat app.
 */
export const createChatAppApiV1AppsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateChatAppApiV1AppsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateChatAppApiV1AppsPostResponse,
    CreateChatAppApiV1AppsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/apps/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Chat App
 */
export const deleteChatAppApiV1AppsIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteChatAppApiV1AppsIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteChatAppApiV1AppsIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/apps/{id}",
    ...options,
  });
};

/**
 * Get Chat App
 * Get a chat app by ID.
 */
export const getChatAppApiV1AppsIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetChatAppApiV1AppsIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetChatAppApiV1AppsIdGetResponse,
    GetChatAppApiV1AppsIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/apps/{id}",
    ...options,
  });
};

/**
 * Update Chat App
 * Update a chat app.
 */
export const updateChatAppApiV1AppsIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateChatAppApiV1AppsIdPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateChatAppApiV1AppsIdPutResponse,
    UpdateChatAppApiV1AppsIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/apps/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Chat With Chat App
 * Chat with a chat app.
 */
export const chatWithChatAppApiV1AppsIdChatPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ChatWithChatAppApiV1AppsIdChatPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    ChatWithChatAppApiV1AppsIdChatPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/apps/{id}/chat",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Deployments
 * List all deployments for a project.
 */
export const listDeploymentsApiV1ProjectsProjectIdAgentsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ListDeploymentsApiV1ProjectsProjectIdAgentsGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ListDeploymentsApiV1ProjectsProjectIdAgentsGetResponse,
    ListDeploymentsApiV1ProjectsProjectIdAgentsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects/{project_id}/agents",
    ...options,
  });
};

/**
 * Sync Deployments
 * Sync deployments for a project.
 */
export const syncDeploymentsApiV1ProjectsProjectIdAgentsSyncPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponse,
    SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/projects/{project_id}/agents:sync",
    ...options,
  });
};

/**
 * Classify Documents
 * **[BETA]** Classify documents based on provided rules - simplified classification system.
 *
 * **This is a Beta feature** - API may change based on user feedback.
 *
 * This endpoint supports:
 * - Classifying new uploaded files
 * - Classifying existing files by ID
 * - Both new files and existing file IDs in one request
 *
 * ## v0 Features:
 * - **Simplified Rules**: Only `type` and `description` fields needed
 * - **Matching Threshold**: Confidence-based classification with configurable threshold
 * - **Smart Classification**: Filename heuristics + LLM content analysis
 * - **Document Type Filtering**: Automatically filters out non-document file types
 * - **Fast Processing**: Uses LlamaParse fast mode + GPT-4.1-nano
 * - **Optimized Performance**: Parses each file only once for all rules
 *
 * ## Simplified Scoring Logic:
 * 1. **Evaluate All Rules**: Compare document against all classification rules
 * 2. **Best Match Selection**: Return the highest scoring rule above matching_threshold
 * 3. **Unknown Classification**: Return as "unknown" if no rules score above threshold
 *
 * This ensures optimal classification by:
 * - Finding the best possible match among all rules
 * - Avoiding false positives with confidence thresholds
 * - Maximizing performance with single-pass file parsing
 *
 * ## Rule Format:
 * ```json
 * [
 * {
 * "type": "invoice",
 * "description": "contains invoice number, line items, and total amount"
 * },
 * {
 * "type": "receipt",
 * "description": "purchase receipt with transaction details and payment info"
 * }
 * ]
 * ```
 *
 * ## Classification Process:
 * 1. **Metadata Heuristics** (configurable via API):
 * - **Document Type Filter**: Only process document file types (PDF, DOC, DOCX, RTF, TXT, ODT, Pages, HTML, XML, Markdown)
 * - **Filename Heuristics**: Check if rule type appears in filename
 * - **Content Analysis**: Parse document content once and use LLM for semantic matching against all rules
 * 2. **Result**: Returns type, confidence score, and matched rule information
 *
 * ## API Parameters:
 * - `matching_threshold` (0.1-0.99, default: 0.6): Minimum confidence threshold for acceptable matches
 * - `enable_metadata_heuristic` (boolean, default: true): Enable metadata-based features
 *
 * ## Supported Document Types:
 * **Text Documents**: pdf, doc, docx, rtf, txt, odt, pages
 * **Web Documents**: html, htm, xml
 * **Markup**: md, markdown
 *
 * ## Limits (Beta):
 * - Maximum 100 files per request
 * - Maximum 10 rules per request
 * - Rule descriptions: 10-500 characters
 * - Document types: 1-50 characters (alphanumeric, hyphens, underscores)
 *
 * **Beta Notice**: This API is subject to change. Please provide feedback!
 */
export const classifyDocumentsApiV1ClassifierClassifyPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ClassifyDocumentsApiV1ClassifierClassifyPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    ClassifyDocumentsApiV1ClassifierClassifyPostResponse,
    ClassifyDocumentsApiV1ClassifierClassifyPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/classifier/classify",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Create Customer Portal Session
 * Create a new customer portal session.
 */
export const createCustomerPortalSessionApiV1BillingCustomerPortalSessionPost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponse,
      CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/billing/customer-portal-session",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * Downgrade Plan
 */
export const downgradePlanApiV1BillingDowngradePlanPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DowngradePlanApiV1BillingDowngradePlanPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    DowngradePlanApiV1BillingDowngradePlanPostResponse,
    DowngradePlanApiV1BillingDowngradePlanPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/billing/downgrade-plan",
    ...options,
  });
};

/**
 * Create Intent And Customer Session
 * Create a new setup intent and and a customer session.
 *
 * See https://docs.stripe.com/payments/existing-customers?platform=web&ui=elements
 */
export const createIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponse,
      CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/billing/create-intent-and-customer-session",
      ...options,
    });
  };

/**
 * Get Metronome Dashboard
 * Get the invoices for a given organization.
 */
export const getMetronomeDashboardApiV1BillingMetronomeDashboardGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetMetronomeDashboardApiV1BillingMetronomeDashboardGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponse,
    GetMetronomeDashboardApiV1BillingMetronomeDashboardGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/billing/metronome/dashboard",
    ...options,
  });
};

/**
 * List Extraction Agents
 */
export const listExtractionAgentsApiV1ExtractionExtractionAgentsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    ListExtractionAgentsApiV1ExtractionExtractionAgentsGetData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponse,
    ListExtractionAgentsApiV1ExtractionExtractionAgentsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/extraction-agents",
    ...options,
  });
};

/**
 * Create Extraction Agent
 */
export const createExtractionAgentApiV1ExtractionExtractionAgentsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    CreateExtractionAgentApiV1ExtractionExtractionAgentsPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponse,
    CreateExtractionAgentApiV1ExtractionExtractionAgentsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/extraction-agents",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Validate Extraction Schema
 * Validates an extraction agent's schema definition.
 * Returns the normalized and validated schema if valid, otherwise raises an HTTP 400.
 */
export const validateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponse,
      ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/extraction/extraction-agents/schema/validation",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * Generate Extraction Schema
 * Generates an extraction agent's schema definition from a file and/or natural language prompt.
 */
export const generateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePost =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).post<
      GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponse,
      GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/extraction/extraction-agents/schema/generate",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * Get Extraction Agent By Name
 */
export const getExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponse,
      GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/extraction/extraction-agents/by-name/{name}",
      ...options,
    });
  };

/**
 * Delete Extraction Agent
 */
export const deleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDelete =
  <ThrowOnError extends boolean = false>(
    options: Options<
      DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}",
      ...options,
    });
  };

/**
 * Get Extraction Agent
 */
export const getExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponse,
      GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}",
      ...options,
    });
  };

/**
 * Update Extraction Agent
 */
export const updateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPut =
  <ThrowOnError extends boolean = false>(
    options: Options<
      UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponse,
      UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };

/**
 * List Jobs
 */
export const listJobsApiV1ExtractionJobsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListJobsApiV1ExtractionJobsGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListJobsApiV1ExtractionJobsGetResponse,
    ListJobsApiV1ExtractionJobsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/jobs",
    ...options,
  });
};

/**
 * Run Job
 */
export const runJobApiV1ExtractionJobsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RunJobApiV1ExtractionJobsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunJobApiV1ExtractionJobsPostResponse,
    RunJobApiV1ExtractionJobsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/jobs",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Job
 */
export const getJobApiV1ExtractionJobsJobIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetJobApiV1ExtractionJobsJobIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobApiV1ExtractionJobsJobIdGetResponse,
    GetJobApiV1ExtractionJobsJobIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/jobs/{job_id}",
    ...options,
  });
};

/**
 * Run Job Test User
 */
export const runJobTestUserApiV1ExtractionJobsTestPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RunJobTestUserApiV1ExtractionJobsTestPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunJobTestUserApiV1ExtractionJobsTestPostResponse,
    RunJobTestUserApiV1ExtractionJobsTestPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/jobs/test",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Run Job On File
 */
export const runJobOnFileApiV1ExtractionJobsFilePost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RunJobOnFileApiV1ExtractionJobsFilePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunJobOnFileApiV1ExtractionJobsFilePostResponse,
    RunJobOnFileApiV1ExtractionJobsFilePostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/jobs/file",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Run Batch Jobs
 */
export const runBatchJobsApiV1ExtractionJobsBatchPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RunBatchJobsApiV1ExtractionJobsBatchPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunBatchJobsApiV1ExtractionJobsBatchPostResponse,
    RunBatchJobsApiV1ExtractionJobsBatchPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/jobs/batch",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Job Result
 */
export const getJobResultApiV1ExtractionJobsJobIdResultGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobResultApiV1ExtractionJobsJobIdResultGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobResultApiV1ExtractionJobsJobIdResultGetResponse,
    GetJobResultApiV1ExtractionJobsJobIdResultGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/jobs/{job_id}/result",
    ...options,
  });
};

/**
 * List Extract Runs
 */
export const listExtractRunsApiV1ExtractionRunsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListExtractRunsApiV1ExtractionRunsGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListExtractRunsApiV1ExtractionRunsGetResponse,
    ListExtractRunsApiV1ExtractionRunsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/runs",
    ...options,
  });
};

/**
 * Get Latest Run From Ui
 */
export const getLatestRunFromUiApiV1ExtractionRunsLatestFromUiGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponse,
    GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/runs/latest-from-ui",
    ...options,
  });
};

/**
 * Get Run By Job Id
 */
export const getRunByJobIdApiV1ExtractionRunsByJobJobIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponse,
    GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/runs/by-job/{job_id}",
    ...options,
  });
};

/**
 * Delete Extraction Run
 */
export const deleteExtractionRunApiV1ExtractionRunsRunIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/runs/{run_id}",
    ...options,
  });
};

/**
 * Get Run
 */
export const getRunApiV1ExtractionRunsRunIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetRunApiV1ExtractionRunsRunIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRunApiV1ExtractionRunsRunIdGetResponse,
    GetRunApiV1ExtractionRunsRunIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/extraction/runs/{run_id}",
    ...options,
  });
};

/**
 * @deprecated
 * Create Report
 * Create a new report.
 */
export const createReportApiV1ReportsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateReportApiV1ReportsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateReportApiV1ReportsPostResponse,
    CreateReportApiV1ReportsPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * @deprecated
 * List Reports
 * List all reports for a project.
 */
export const listReportsApiV1ReportsListGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListReportsApiV1ReportsListGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListReportsApiV1ReportsListGetResponse,
    ListReportsApiV1ReportsListGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/list",
    ...options,
  });
};

/**
 * @deprecated
 * Delete Report
 * Delete a report.
 */
export const deleteReportApiV1ReportsReportIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteReportApiV1ReportsReportIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteReportApiV1ReportsReportIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}",
    ...options,
  });
};

/**
 * @deprecated
 * Get Report
 * Get a specific report.
 */
export const getReportApiV1ReportsReportIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetReportApiV1ReportsReportIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetReportApiV1ReportsReportIdGetResponse,
    GetReportApiV1ReportsReportIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}",
    ...options,
  });
};

/**
 * @deprecated
 * Update Report
 * Update a report's content.
 */
export const updateReportApiV1ReportsReportIdPatch = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateReportApiV1ReportsReportIdPatchData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateReportApiV1ReportsReportIdPatchResponse,
    UpdateReportApiV1ReportsReportIdPatchError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * @deprecated
 * Update Report Metadata
 * Update metadata for a report.
 */
export const updateReportMetadataApiV1ReportsReportIdPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateReportMetadataApiV1ReportsReportIdPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    UpdateReportMetadataApiV1ReportsReportIdPostResponse,
    UpdateReportMetadataApiV1ReportsReportIdPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * @deprecated
 * Get Report Plan
 * Get the plan for a report.
 */
export const getReportPlanApiV1ReportsReportIdPlanGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetReportPlanApiV1ReportsReportIdPlanGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetReportPlanApiV1ReportsReportIdPlanGetResponse,
    GetReportPlanApiV1ReportsReportIdPlanGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}/plan",
    ...options,
  });
};

/**
 * @deprecated
 * Update Report Plan
 * Update the plan of a report, including approval, rejection, and editing.
 */
export const updateReportPlanApiV1ReportsReportIdPlanPatch = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateReportPlanApiV1ReportsReportIdPlanPatchData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateReportPlanApiV1ReportsReportIdPlanPatchResponse,
    UpdateReportPlanApiV1ReportsReportIdPlanPatchError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}/plan",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * @deprecated
 * Get Report Events
 * Get all historical events for a report.
 */
export const getReportEventsApiV1ReportsReportIdEventsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetReportEventsApiV1ReportsReportIdEventsGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetReportEventsApiV1ReportsReportIdEventsGetResponse,
    GetReportEventsApiV1ReportsReportIdEventsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}/events",
    ...options,
  });
};

/**
 * @deprecated
 * Get Report Metadata
 * Get metadata for a report.
 */
export const getReportMetadataApiV1ReportsReportIdMetadataGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetReportMetadataApiV1ReportsReportIdMetadataGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetReportMetadataApiV1ReportsReportIdMetadataGetResponse,
    GetReportMetadataApiV1ReportsReportIdMetadataGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}/metadata",
    ...options,
  });
};

/**
 * @deprecated
 * Suggest Edits Endpoint
 * Suggest edits to a report based on user query and chat history.
 */
export const suggestEditsEndpointApiV1ReportsReportIdSuggestEditsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponse,
    SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}/suggest_edits",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * @deprecated
 * Restart Report
 * Restart a report from scratch.
 */
export const restartReportApiV1ReportsReportIdRestartPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    RestartReportApiV1ReportsReportIdRestartPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    RestartReportApiV1ReportsReportIdRestartPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/reports/{report_id}/restart",
    ...options,
  });
};

/**
 * List Batches
 */
export const listBatchesApiV1BetaBatchesGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListBatchesApiV1BetaBatchesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListBatchesApiV1BetaBatchesGetResponse,
    ListBatchesApiV1BetaBatchesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/batches",
    ...options,
  });
};

/**
 * Create Batch
 */
export const createBatchApiV1BetaBatchesPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateBatchApiV1BetaBatchesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateBatchApiV1BetaBatchesPostResponse,
    CreateBatchApiV1BetaBatchesPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/batches",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Batch
 */
export const getBatchApiV1BetaBatchesBatchIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetBatchApiV1BetaBatchesBatchIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetBatchApiV1BetaBatchesBatchIdGetResponse,
    GetBatchApiV1BetaBatchesBatchIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/batches/{batch_id}",
    ...options,
  });
};

/**
 * Delete Agent Data
 * Delete agent data by ID.
 */
export const deleteAgentDataApiV1BetaAgentDataItemIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteAgentDataApiV1BetaAgentDataItemIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponse,
    DeleteAgentDataApiV1BetaAgentDataItemIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/agent-data/{item_id}",
    ...options,
  });
};

/**
 * Get Agent Data
 * Get agent data by ID.
 */
export const getAgentDataApiV1BetaAgentDataItemIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetAgentDataApiV1BetaAgentDataItemIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentDataApiV1BetaAgentDataItemIdGetResponse,
    GetAgentDataApiV1BetaAgentDataItemIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/agent-data/{item_id}",
    ...options,
  });
};

/**
 * Update Agent Data
 * Update agent data by ID (overwrites).
 */
export const updateAgentDataApiV1BetaAgentDataItemIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateAgentDataApiV1BetaAgentDataItemIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentDataApiV1BetaAgentDataItemIdPutResponse,
    UpdateAgentDataApiV1BetaAgentDataItemIdPutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/agent-data/{item_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Agent Data
 * Create new agent data.
 */
export const createAgentDataApiV1BetaAgentDataPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateAgentDataApiV1BetaAgentDataPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentDataApiV1BetaAgentDataPostResponse,
    CreateAgentDataApiV1BetaAgentDataPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/agent-data",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Search Agent Data
 * Search agent data with filtering, sorting, and pagination.
 */
export const searchAgentDataApiV1BetaAgentDataSearchPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SearchAgentDataApiV1BetaAgentDataSearchPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    SearchAgentDataApiV1BetaAgentDataSearchPostResponse,
    SearchAgentDataApiV1BetaAgentDataSearchPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/agent-data/:search",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Aggregate Agent Data
 * Aggregate agent data with grouping and optional counting/first item retrieval.
 */
export const aggregateAgentDataApiV1BetaAgentDataAggregatePost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AggregateAgentDataApiV1BetaAgentDataAggregatePostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    AggregateAgentDataApiV1BetaAgentDataAggregatePostResponse,
    AggregateAgentDataApiV1BetaAgentDataAggregatePostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/beta/agent-data/:aggregate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Job Image Result
 * Get a job by id
 */
export const getJobImageResultApiParsingJobJobIdResultImageNameGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobImageResultApiParsingJobJobIdResultImageNameGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobImageResultApiParsingJobJobIdResultImageNameGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/image/{name}",
    ...options,
  });
};

/**
 * Get Supported File Extensions
 * Get a list of supported file extensions
 */
export const getSupportedFileExtensionsApiParsingSupportedFileExtensionsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/parsing/supported_file_extensions",
    ...options,
  });
};

/**
 * Screenshot
 */
export const screenshotApiParsingScreenshotPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ScreenshotApiParsingScreenshotPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    ScreenshotApiParsingScreenshotPostResponse,
    ScreenshotApiParsingScreenshotPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/screenshot",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Upload File
 */
export const uploadFileApiParsingUploadPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UploadFileApiParsingUploadPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    UploadFileApiParsingUploadPostResponse,
    UploadFileApiParsingUploadPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Get Job
 * Get a job by id
 */
export const getJobApiParsingJobJobIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetJobApiParsingJobJobIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobApiParsingJobJobIdGetResponse,
    GetJobApiParsingJobJobIdGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}",
    ...options,
  });
};

/**
 * Get Job Parameters
 * Get a job by id
 */
export const getJobParametersApiParsingJobJobIdParametersGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobParametersApiParsingJobJobIdParametersGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobParametersApiParsingJobJobIdParametersGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/parameters",
    ...options,
  });
};

/**
 * Get Parsing Job Details
 * Get a job by id
 */
export const getParsingJobDetailsApiParsingJobJobIdDetailsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetParsingJobDetailsApiParsingJobJobIdDetailsGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetParsingJobDetailsApiParsingJobJobIdDetailsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/details",
    ...options,
  });
};

/**
 * Get Job Text Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
export const getJobTextResultApiParsingJobJobIdResultTextGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobTextResultApiParsingJobJobIdResultTextGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobTextResultApiParsingJobJobIdResultTextGetResponse,
    GetJobTextResultApiParsingJobJobIdResultTextGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/text",
    ...options,
  });
};

/**
 * Get Job Raw Text Result Raw
 * Get a job by id
 */
export const getJobRawTextResultRawApiParsingJobJobIdResultRawTextGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/raw/text",
    ...options,
  });
};

/**
 * Get Job Raw Text Result
 * Get a job by id
 */
export const getJobRawTextResultApiParsingJobJobIdResultPdfGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawTextResultApiParsingJobJobIdResultPdfGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawTextResultApiParsingJobJobIdResultPdfGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/pdf",
    ...options,
  });
};

/**
 * Get Job Raw Text Result Raw Pdf
 * Get a job by id
 */
export const getJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/raw/pdf",
    ...options,
  });
};

/**
 * Get Job Structured Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
export const getJobStructuredResultApiParsingJobJobIdResultStructuredGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobStructuredResultApiParsingJobJobIdResultStructuredGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponse,
    GetJobStructuredResultApiParsingJobJobIdResultStructuredGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/structured",
    ...options,
  });
};

/**
 * Get Job Raw Structured Result
 * Get a job by id
 */
export const getJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGet =
  <ThrowOnError extends boolean = false>(
    options: Options<
      GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).get<
      unknown,
      GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/parsing/job/{job_id}/result/raw/structured",
      ...options,
    });
  };

/**
 * Get Job Raw Xlsx Result
 * Get a job by id
 */
export const getJobRawXlsxResultApiParsingJobJobIdResultXlsxGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/xlsx",
    ...options,
  });
};

/**
 * Get Job Raw Xlsx Result Raw
 * Get a job by id
 */
export const getJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/raw/xlsx",
    ...options,
  });
};

/**
 * Get Job Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
export const getJobResultApiParsingJobJobIdResultMarkdownGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobResultApiParsingJobJobIdResultMarkdownGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobResultApiParsingJobJobIdResultMarkdownGetResponse,
    GetJobResultApiParsingJobJobIdResultMarkdownGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/markdown",
    ...options,
  });
};

/**
 * Get Job Raw Md Result
 * Get a job by id
 */
export const getJobRawMdResultApiParsingJobJobIdResultRawMarkdownGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/raw/markdown",
    ...options,
  });
};

/**
 * Get Job Json Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
export const getJobJsonResultApiParsingJobJobIdResultJsonGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobJsonResultApiParsingJobJobIdResultJsonGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetJobJsonResultApiParsingJobJobIdResultJsonGetResponse,
    GetJobJsonResultApiParsingJobJobIdResultJsonGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/json",
    ...options,
  });
};

/**
 * Get Job Json Raw Result
 * Get a job by id
 */
export const getJobJsonRawResultApiParsingJobJobIdResultRawJsonGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/result/raw/json",
    ...options,
  });
};

/**
 * @deprecated
 * Get Parsing History Result
 * Get parsing history for user
 *
 * This endpoint is deprecated.
 * Use /api/v1/jobs/?job_name=parsing&project_id=YOUR_PROJECT_ID instead.
 */
export const getParsingHistoryResultApiParsingHistoryGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetParsingHistoryResultApiParsingHistoryGetData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetParsingHistoryResultApiParsingHistoryGetResponse,
    GetParsingHistoryResultApiParsingHistoryGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/history",
    ...options,
  });
};

/**
 * Generate Presigned Url
 * Generate a presigned URL for a job
 */
export const generatePresignedUrlApiParsingJobJobIdReadFilenameGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponse,
    GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/parsing/job/{job_id}/read/{filename}",
    ...options,
  });
};
