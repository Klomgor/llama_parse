// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zApiKey = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.union([z.string().min(0).max(3000), z.null()]).optional(),
  project_id: z.union([z.string().uuid(), z.null()]).optional(),
  user_id: z.string(),
  redacted_api_key: z.string(),
});

export const zApiKeyCreate = z.object({
  name: z.union([z.string().min(0).max(3000), z.null()]).optional(),
  project_id: z.union([z.string().uuid(), z.null()]).optional(),
});

export const zApiKeyUpdate = z.object({
  name: z.union([z.string().min(0).max(3000), z.null()]).optional(),
});

export const zNoneSegmentationConfig = z.object({
  mode: z.literal("none").optional().default("none"),
});

export const zPageSegmentationConfig = z.object({
  mode: z.literal("page").optional().default("page"),
  page_separator: z.string().optional().default(`
---
`),
});

export const zElementSegmentationConfig = z.object({
  mode: z.literal("element").optional().default("element"),
});

export const zNoneChunkingConfig = z.object({
  mode: z.literal("none").optional().default("none"),
});

export const zCharacterChunkingConfig = z.object({
  chunk_size: z.number().int().optional().default(1024),
  chunk_overlap: z.number().int().optional().default(200),
  mode: z.literal("character").optional().default("character"),
});

export const zTokenChunkingConfig = z.object({
  chunk_size: z.number().int().optional().default(1024),
  chunk_overlap: z.number().int().optional().default(200),
  mode: z.literal("token").optional().default("token"),
  separator: z.string().optional().default(" "),
});

export const zSentenceChunkingConfig = z.object({
  chunk_size: z.number().int().optional().default(1024),
  chunk_overlap: z.number().int().optional().default(200),
  mode: z.literal("sentence").optional().default("sentence"),
  separator: z.string().optional().default(" "),
  paragraph_separator: z.string().optional().default(`


`),
});

export const zSemanticChunkingConfig = z.object({
  mode: z.literal("semantic").optional().default("semantic"),
  buffer_size: z.number().int().optional().default(1),
  breakpoint_percentile_threshold: z.number().int().optional().default(95),
});

export const zAdvancedModeTransformConfig = z.object({
  mode: z.literal("advanced").optional().default("advanced"),
  segmentation_config: z
    .union([
      zNoneSegmentationConfig,
      zPageSegmentationConfig,
      zElementSegmentationConfig,
    ])
    .optional(),
  chunking_config: z
    .union([
      zNoneChunkingConfig,
      zCharacterChunkingConfig,
      zTokenChunkingConfig,
      zSentenceChunkingConfig,
      zSemanticChunkingConfig,
    ])
    .optional(),
});

export const zAgentData = z.object({
  id: z.union([z.string(), z.null()]).optional(),
  agent_slug: z.string(),
  collection: z.string().optional().default("default"),
  data: z.object({}),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
});

export const zAgentDataCreate = z.object({
  agent_slug: z.string(),
  collection: z.string().optional().default("default"),
  data: z.object({}),
});

export const zAgentDataUpdate = z.object({
  data: z.object({}),
});

export const zAgentDeploymentSummary = z.object({
  id: z.string(),
  project_id: z.string().uuid(),
  agent_slug: z.string(),
  thumbnail_url: z.union([z.string(), z.null()]).optional(),
  base_url: z.string(),
  display_name: z.string(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
});

export const zAgentDeploymentList = z.object({
  deployments: z.array(zAgentDeploymentSummary),
});

export const zAggregateGroup = z.object({
  group_key: z.object({}),
  count: z.union([z.number().int(), z.null()]).optional(),
  first_item: z.union([z.object({}), z.null()]).optional(),
});

export const zAggregateRequest = z.object({
  page_size: z.union([z.number().int(), z.null()]).optional(),
  page_token: z.union([z.string(), z.null()]).optional(),
  filter: z.union([z.object({}), z.null()]).optional(),
  order_by: z.union([z.string(), z.null()]).optional(),
  agent_slug: z.string(),
  collection: z.string().optional().default("default"),
  group_by: z.union([z.array(z.string()), z.null()]).optional(),
  count: z.union([z.boolean(), z.null()]).optional(),
  first: z.union([z.boolean(), z.null()]).optional(),
  offset: z.union([z.number().int().gte(0), z.null()]).optional(),
});

export const zMessageRole = z.enum([
  "system",
  "developer",
  "user",
  "assistant",
  "function",
  "tool",
  "chatbot",
  "model",
]);

export const zInputMessage = z.object({
  id: z.string().uuid().optional(),
  role: zMessageRole,
  content: z.string(),
  data: z.union([z.object({}), z.null()]).optional(),
  class_name: z.string().optional().default("base_component"),
});

export const zAppChatInputParams = z.object({
  messages: z.array(zInputMessage).optional(),
});

export const zAudioBlock = z.object({
  block_type: z.literal("audio").optional().default("audio"),
  audio: z.union([z.string(), z.null()]).optional(),
  path: z.union([z.string(), z.null()]).optional(),
  url: z.union([z.string().url().min(1), z.null()]).optional(),
  format: z.union([z.string(), z.null()]).optional(),
});

export const zAutoTransformConfig = z.object({
  mode: z.literal("auto").optional().default("auto"),
  chunk_size: z.number().int().optional().default(1024),
  chunk_overlap: z.number().int().optional().default(200),
});

export const zAzureOpenAiEmbedding = z.object({
  model_name: z.string().optional().default("text-embedding-ada-002"),
  embed_batch_size: z.number().int().lte(2048).optional().default(10),
  num_workers: z.union([z.number().int(), z.null()]).optional(),
  additional_kwargs: z.object({}).optional(),
  api_key: z.union([z.string(), z.null()]).optional(),
  api_base: z.string().optional().default(""),
  api_version: z.string().optional().default(""),
  max_retries: z.number().int().optional().default(10),
  timeout: z.number().optional().default(60),
  default_headers: z.union([z.object({}), z.null()]).optional(),
  reuse_client: z.boolean().optional().default(true),
  dimensions: z.union([z.number().int(), z.null()]).optional(),
  azure_endpoint: z.union([z.string(), z.null()]).optional(),
  azure_deployment: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("AzureOpenAIEmbedding"),
});

export const zAzureOpenAiEmbeddingConfig = z.object({
  type: z.literal("AZURE_EMBEDDING").optional().default("AZURE_EMBEDDING"),
  component: zAzureOpenAiEmbedding.optional(),
});

export const zBaseConnectionValidation = z.object({
  success: z.boolean(),
  message: z.string(),
});

export const zPlanLimits = z.object({
  allow_pay_as_you_go: z.boolean(),
  subscription_cost_usd: z.number().int(),
  max_monthly_invoice_total_usd: z.union([z.number().int(), z.null()]),
  spending_soft_alerts_usd_cents: z
    .union([z.array(z.number().int()), z.null()])
    .optional(),
  max_concurrent_parse_jobs_premium: z.union([z.number().int(), z.null()]),
  max_concurrent_parse_jobs_other: z.union([z.number().int(), z.null()]),
  max_extraction_agents: z.union([z.number().int(), z.null()]),
  max_extraction_runs: z.union([z.number().int(), z.null()]),
  max_extraction_jobs: z.union([z.number().int(), z.null()]),
  max_pages_per_index: z.union([z.number().int(), z.null()]),
  max_files_per_index: z.union([z.number().int(), z.null()]),
  max_indexes: z.union([z.number().int(), z.null()]),
  max_concurrent_index_jobs: z.union([z.number().int(), z.null()]),
  max_data_sources: z.union([z.number().int(), z.null()]),
  max_embedding_models: z.union([z.number().int(), z.null()]),
  max_data_sinks: z.union([z.number().int(), z.null()]),
  max_published_agents: z.union([z.number().int(), z.null()]),
  max_report_agent_sessions: z.union([z.number().int(), z.null()]),
  max_users: z.union([z.number().int(), z.null()]),
  max_organizations: z.union([z.number().int(), z.null()]),
  max_projects: z.union([z.number().int(), z.null()]),
  mfa_enabled: z.boolean(),
  sso_enabled: z.boolean(),
});

export const zCreditType = z.object({
  id: z.string(),
  name: z.string(),
});

export const zRecurringCreditGrant = z.object({
  name: z.string(),
  credit_amount: z.number().int(),
  credit_type: zCreditType,
  product_id: z.string(),
  priority: z.number(),
  rollover_fraction: z.number(),
  periods_duration: z.number().optional().default(1),
});

export const zBillingPeriod = z.object({
  start_date: z.string().datetime(),
  end_date: z.string().datetime(),
});

export const zBasePlan = z.object({
  id: z.union([z.string(), z.null()]).optional(),
  name: z.enum([
    "free",
    "llama_parse",
    "enterprise",
    "unknown",
    "free_contract",
    "pro",
    "enterprise_contract",
    "enterprise_poc",
    "free_v1",
    "starter_v1",
    "pro_v1",
  ]),
  metronome_plan_type: z.enum(["plan", "contract"]),
  metronome_rate_card_alias: z.union([z.string(), z.null()]),
  limits: zPlanLimits,
  recurring_credits: z
    .union([z.array(zRecurringCreditGrant), z.null()])
    .optional(),
  plan_frequency: z.enum(["MONTHLY", "QUARTERLY", "ANNUAL"]),
  metronome_customer_id: z.union([z.string(), z.null()]).optional(),
  starting_on: z.union([z.string().datetime(), z.null()]).optional(),
  ending_before: z.union([z.string().datetime(), z.null()]).optional(),
  current_billing_period: z.union([zBillingPeriod, z.null()]).optional(),
  is_payment_failed: z.boolean().optional().default(false),
  failure_count: z.number().int().optional().default(0),
});

export const zParserLanguages = z.enum([
  "af",
  "az",
  "bs",
  "cs",
  "cy",
  "da",
  "de",
  "en",
  "es",
  "et",
  "fr",
  "ga",
  "hr",
  "hu",
  "id",
  "is",
  "it",
  "ku",
  "la",
  "lt",
  "lv",
  "mi",
  "ms",
  "mt",
  "nl",
  "no",
  "oc",
  "pi",
  "pl",
  "pt",
  "ro",
  "rs_latin",
  "sk",
  "sl",
  "sq",
  "sv",
  "sw",
  "tl",
  "tr",
  "uz",
  "vi",
  "ar",
  "fa",
  "ug",
  "ur",
  "bn",
  "as",
  "mni",
  "ru",
  "rs_cyrillic",
  "be",
  "bg",
  "uk",
  "mn",
  "abq",
  "ady",
  "kbd",
  "ava",
  "dar",
  "inh",
  "che",
  "lbe",
  "lez",
  "tab",
  "tjk",
  "hi",
  "mr",
  "ne",
  "bh",
  "mai",
  "ang",
  "bho",
  "mah",
  "sck",
  "new",
  "gom",
  "sa",
  "bgc",
  "th",
  "ch_sim",
  "ch_tra",
  "ja",
  "ko",
  "ta",
  "te",
  "kn",
]);

export const zParsingMode = z.enum([
  "parse_page_without_llm",
  "parse_page_with_llm",
  "parse_page_with_lvm",
  "parse_page_with_agent",
  "parse_page_with_layout_agent",
  "parse_document_with_llm",
  "parse_document_with_lvm",
  "parse_document_with_agent",
]);

export const zFailPageMode = z.enum([
  "raw_text",
  "blank_page",
  "error_message",
]);

export const zLlamaParseParameters = z.object({
  priority: z
    .union([z.enum(["low", "medium", "high", "critical"]), z.null()])
    .optional(),
  languages: z.array(zParserLanguages).min(1).optional(),
  parsing_instruction: z.union([z.string(), z.null()]).optional(),
  disable_ocr: z.union([z.boolean(), z.null()]).optional(),
  annotate_links: z.union([z.boolean(), z.null()]).optional(),
  adaptive_long_table: z.union([z.boolean(), z.null()]).optional(),
  compact_markdown_table: z.union([z.boolean(), z.null()]).optional(),
  disable_reconstruction: z.union([z.boolean(), z.null()]).optional(),
  disable_image_extraction: z.union([z.boolean(), z.null()]).optional(),
  invalidate_cache: z.union([z.boolean(), z.null()]).optional(),
  outlined_table_extraction: z.union([z.boolean(), z.null()]).optional(),
  merge_tables_across_pages_in_markdown: z
    .union([z.boolean(), z.null()])
    .optional(),
  output_pdf_of_document: z.union([z.boolean(), z.null()]).optional(),
  do_not_cache: z.union([z.boolean(), z.null()]).optional(),
  fast_mode: z.union([z.boolean(), z.null()]).optional(),
  skip_diagonal_text: z.union([z.boolean(), z.null()]).optional(),
  preserve_layout_alignment_across_pages: z
    .union([z.boolean(), z.null()])
    .optional(),
  gpt4o_mode: z.union([z.boolean(), z.null()]).optional(),
  gpt4o_api_key: z.union([z.string(), z.null()]).optional(),
  do_not_unroll_columns: z.union([z.boolean(), z.null()]).optional(),
  extract_layout: z.union([z.boolean(), z.null()]).optional(),
  high_res_ocr: z.union([z.boolean(), z.null()]).optional(),
  html_make_all_elements_visible: z.union([z.boolean(), z.null()]).optional(),
  html_remove_navigation_elements: z.union([z.boolean(), z.null()]).optional(),
  html_remove_fixed_elements: z.union([z.boolean(), z.null()]).optional(),
  guess_xlsx_sheet_name: z.union([z.boolean(), z.null()]).optional(),
  page_separator: z.union([z.string(), z.null()]).optional(),
  bounding_box: z.union([z.string(), z.null()]).optional(),
  bbox_top: z.union([z.number(), z.null()]).optional(),
  bbox_right: z.union([z.number(), z.null()]).optional(),
  bbox_bottom: z.union([z.number(), z.null()]).optional(),
  bbox_left: z.union([z.number(), z.null()]).optional(),
  target_pages: z.union([z.string(), z.null()]).optional(),
  use_vendor_multimodal_model: z.union([z.boolean(), z.null()]).optional(),
  vendor_multimodal_model_name: z.union([z.string(), z.null()]).optional(),
  model: z.union([z.string(), z.null()]).optional(),
  vendor_multimodal_api_key: z.union([z.string(), z.null()]).optional(),
  page_prefix: z.union([z.string(), z.null()]).optional(),
  page_suffix: z.union([z.string(), z.null()]).optional(),
  webhook_url: z.union([z.string(), z.null()]).optional(),
  preset: z.union([z.string(), z.null()]).optional(),
  take_screenshot: z.union([z.boolean(), z.null()]).optional(),
  is_formatting_instruction: z.union([z.boolean(), z.null()]).optional(),
  premium_mode: z.union([z.boolean(), z.null()]).optional(),
  continuous_mode: z.union([z.boolean(), z.null()]).optional(),
  input_s3_path: z.union([z.string(), z.null()]).optional(),
  input_s3_region: z.union([z.string(), z.null()]).optional(),
  output_s3_path_prefix: z.union([z.string(), z.null()]).optional(),
  output_s3_region: z.union([z.string(), z.null()]).optional(),
  project_id: z.union([z.string(), z.null()]).optional(),
  azure_openai_deployment_name: z.union([z.string(), z.null()]).optional(),
  azure_openai_endpoint: z.union([z.string(), z.null()]).optional(),
  azure_openai_api_version: z.union([z.string(), z.null()]).optional(),
  azure_openai_key: z.union([z.string(), z.null()]).optional(),
  input_url: z.union([z.string(), z.null()]).optional(),
  http_proxy: z.union([z.string(), z.null()]).optional(),
  auto_mode: z.union([z.boolean(), z.null()]).optional(),
  auto_mode_trigger_on_regexp_in_page: z
    .union([z.string(), z.null()])
    .optional(),
  auto_mode_trigger_on_text_in_page: z.union([z.string(), z.null()]).optional(),
  auto_mode_trigger_on_table_in_page: z
    .union([z.boolean(), z.null()])
    .optional(),
  auto_mode_trigger_on_image_in_page: z
    .union([z.boolean(), z.null()])
    .optional(),
  auto_mode_configuration_json: z.union([z.string(), z.null()]).optional(),
  structured_output: z.union([z.boolean(), z.null()]).optional(),
  structured_output_json_schema: z.union([z.string(), z.null()]).optional(),
  structured_output_json_schema_name: z
    .union([z.string(), z.null()])
    .optional(),
  max_pages: z.union([z.number().int(), z.null()]).optional(),
  max_pages_enforced: z.union([z.number().int(), z.null()]).optional(),
  extract_charts: z.union([z.boolean(), z.null()]).optional(),
  formatting_instruction: z.union([z.string(), z.null()]).optional(),
  complemental_formatting_instruction: z
    .union([z.string(), z.null()])
    .optional(),
  content_guideline_instruction: z.union([z.string(), z.null()]).optional(),
  spreadsheet_extract_sub_tables: z.union([z.boolean(), z.null()]).optional(),
  job_timeout_in_seconds: z.union([z.number(), z.null()]).optional(),
  job_timeout_extra_time_per_page_in_seconds: z
    .union([z.number(), z.null()])
    .optional(),
  strict_mode_image_extraction: z.union([z.boolean(), z.null()]).optional(),
  strict_mode_image_ocr: z.union([z.boolean(), z.null()]).optional(),
  strict_mode_reconstruction: z.union([z.boolean(), z.null()]).optional(),
  strict_mode_buggy_font: z.union([z.boolean(), z.null()]).optional(),
  save_images: z.union([z.boolean(), z.null()]).optional(),
  hide_headers: z.union([z.boolean(), z.null()]).optional(),
  hide_footers: z.union([z.boolean(), z.null()]).optional(),
  page_header_prefix: z.union([z.string(), z.null()]).optional(),
  page_header_suffix: z.union([z.string(), z.null()]).optional(),
  page_footer_prefix: z.union([z.string(), z.null()]).optional(),
  page_footer_suffix: z.union([z.string(), z.null()]).optional(),
  ignore_document_elements_for_layout_detection: z
    .union([z.boolean(), z.null()])
    .optional(),
  output_tables_as_HTML: z.union([z.boolean(), z.null()]).optional(),
  internal_is_screenshot_job: z.union([z.boolean(), z.null()]).optional(),
  parse_mode: z.union([zParsingMode, z.null()]).optional(),
  system_prompt: z.union([z.string(), z.null()]).optional(),
  system_prompt_append: z.union([z.string(), z.null()]).optional(),
  user_prompt: z.union([z.string(), z.null()]).optional(),
  page_error_tolerance: z.union([z.number(), z.null()]).optional(),
  replace_failed_page_mode: z.union([zFailPageMode, z.null()]).optional(),
  replace_failed_page_with_error_message_prefix: z
    .union([z.string(), z.null()])
    .optional(),
  replace_failed_page_with_error_message_suffix: z
    .union([z.string(), z.null()])
    .optional(),
  markdown_table_multiline_header_separator: z
    .union([z.string(), z.null()])
    .optional(),
});

export const zBatch = z.object({
  tool: z.string(),
  tool_data: z.union([zLlamaParseParameters, z.null()]).optional(),
  input_type: z.string(),
  input_id: z.string(),
  output_type: z.union([z.string(), z.null()]).optional(),
  output_id: z.union([z.string(), z.null()]).optional(),
  id: z.string(),
  project_id: z.string(),
  organization_id: z.string(),
  user_id: z.string(),
  external_id: z.union([z.string(), z.null()]).optional(),
  completion_window: z.number().int(),
  pipeline_id: z.string(),
  status: z.string(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
});

export const zBatchCreate = z.object({
  tool: z.string(),
  tool_data: z.union([zLlamaParseParameters, z.null()]).optional(),
  input_type: z.string(),
  input_id: z.string(),
  output_type: z.union([z.string(), z.null()]).optional(),
  output_id: z.union([z.string(), z.null()]).optional(),
  project_id: z.string().uuid(),
  external_id: z.string(),
  completion_window: z.number().int().optional().default(86400),
});

export const zFileParsePublic = z.object({
  created_at: z.string().datetime(),
  status: z.string(),
  started_at: z.union([z.string().datetime(), z.null()]).optional(),
  ended_at: z.union([z.string().datetime(), z.null()]).optional(),
  input_path: z.string(),
  data_path: z.string(),
});

export const zBatchItem = z.object({
  id: z.string(),
  batch_id: z.string(),
  status: z.string(),
  status_updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  input_file: z.string(),
  output_file: z.union([z.string(), z.null()]).optional(),
  task: z.union([zFileParsePublic, z.null()]).optional(),
});

export const zBatchPaginatedList = z.object({
  data: z.array(zBatch),
  limit: z.number().int(),
  offset: z.number().int(),
  total_count: z.number().int(),
});

export const zManagedIngestionStatus = z.enum([
  "NOT_STARTED",
  "IN_PROGRESS",
  "SUCCESS",
  "ERROR",
  "PARTIAL_SUCCESS",
  "CANCELLED",
]);

export const zJobNameMapping = z.enum([
  "MANAGED_INGESTION",
  "DATA_SOURCE",
  "FILES_UPDATE",
  "FILE_UPDATER",
  "PARSE",
  "TRANSFORM",
  "INGESTION",
  "METADATA_UPDATE",
]);

export const zIngestionErrorResponse = z.object({
  job_id: z.string().uuid(),
  message: z.string(),
  step: zJobNameMapping,
});

export const zManagedIngestionStatusResponse = z.object({
  job_id: z.union([z.string().uuid(), z.null()]).optional(),
  deployment_date: z.union([z.string().datetime(), z.null()]).optional(),
  status: zManagedIngestionStatus,
  error: z.union([z.array(zIngestionErrorResponse), z.null()]).optional(),
  effective_at: z.union([z.string().datetime(), z.null()]).optional(),
});

export const zBatchPublicOutput = z.object({
  batch: zBatch,
  batch_items: z.array(zBatchItem),
  ingestion_status: zManagedIngestionStatusResponse,
});

export const zBedrockEmbedding = z.object({
  model_name: z.string().optional().default("amazon.titan-embed-text-v1"),
  embed_batch_size: z.number().int().lte(2048).optional().default(10),
  num_workers: z.union([z.number().int(), z.null()]).optional(),
  profile_name: z.union([z.string(), z.null()]).optional(),
  aws_access_key_id: z.union([z.string(), z.null()]).optional(),
  aws_secret_access_key: z.union([z.string(), z.null()]).optional(),
  aws_session_token: z.union([z.string(), z.null()]).optional(),
  region_name: z.union([z.string(), z.null()]).optional(),
  max_retries: z.number().int().optional().default(10),
  timeout: z.number().optional().default(60),
  additional_kwargs: z.object({}).optional(),
  class_name: z.string().optional().default("BedrockEmbedding"),
});

export const zBedrockEmbeddingConfig = z.object({
  type: z.literal("BEDROCK_EMBEDDING").optional().default("BEDROCK_EMBEDDING"),
  component: zBedrockEmbedding.optional(),
});

export const zBodyClassifyDocumentsApiV1ClassifierClassifyPost = z.object({
  rules_json: z.string(),
  files: z.union([z.array(z.string()), z.null()]).optional(),
  file_ids: z.union([z.string(), z.null()]).optional(),
  matching_threshold: z
    .union([z.number().gte(0.1).lte(0.99), z.null()])
    .optional(),
  enable_metadata_heuristic: z.union([z.boolean(), z.null()]).optional(),
});

export const zBodyCreateReportApiV1ReportsPost = z.object({
  name: z.string(),
  template_text: z.string().optional(),
  template_instructions: z.union([z.string(), z.null()]).optional(),
  existing_retriever_id: z.union([z.string().uuid(), z.null()]).optional(),
  files: z.array(z.string()),
  template_file: z.union([z.string(), z.null()]).optional(),
});

export const zBodyImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPut =
  z.object({
    upload_file: z.string(),
  });

export const zBodyRunJobOnFileApiV1ExtractionJobsFilePost = z.object({
  extraction_agent_id: z.string().uuid(),
  file: z.string(),
  data_schema_override: z.union([z.string(), z.null()]).optional(),
  config_override: z.union([z.string(), z.null()]).optional(),
});

export const zWebhookConfiguration = z.object({
  webhook_url: z.union([z.string(), z.null()]).optional(),
  webhook_headers: z.union([z.object({}), z.null()]).optional(),
  webhook_events: z
    .union([
      z.array(
        z.enum([
          "extract.pending",
          "extract.success",
          "extract.error",
          "extract.partial_success",
          "extract.cancelled",
          "unmapped_event",
        ]),
      ),
      z.null(),
    ])
    .optional(),
});

export const zExtractTarget = z.enum(["PER_DOC", "PER_PAGE"]);

export const zExtractMode = z.enum([
  "FAST",
  "BALANCED",
  "PREMIUM",
  "MULTIMODAL",
]);

export const zDocumentChunkMode = z.enum(["PAGE", "SECTION"]);

export const zExtractConfig = z.object({
  priority: z
    .union([z.enum(["low", "medium", "high", "critical"]), z.null()])
    .optional(),
  extraction_target: zExtractTarget.optional(),
  extraction_mode: zExtractMode.optional(),
  multimodal_fast_mode: z.boolean().optional().default(false),
  system_prompt: z.union([z.string(), z.null()]).optional(),
  use_reasoning: z.boolean().optional().default(false),
  cite_sources: z.boolean().optional().default(false),
  chunk_mode: zDocumentChunkMode.optional(),
  invalidate_cache: z.boolean().optional().default(false),
});

export const zExtractJobCreate = z.object({
  webhook_configurations: z
    .union([z.array(zWebhookConfiguration), z.null()])
    .optional(),
  extraction_agent_id: z.string().uuid(),
  file_id: z.string().uuid(),
  data_schema_override: z
    .union([z.object({}), z.string(), z.null()])
    .optional(),
  config_override: z.union([zExtractConfig, z.null()]).optional(),
});

export const zChunkMode = z.enum([
  "PAGE",
  "DOCUMENT",
  "SECTION",
  "GROUPED_PAGES",
]);

export const zLlamaExtractSettings = z.object({
  max_file_size: z.number().int().optional().default(104857600),
  max_file_size_ui: z.number().int().optional().default(31457280),
  max_pages: z.number().int().optional().default(500),
  chunk_mode: zChunkMode.optional(),
  max_chunk_size: z.number().int().optional().default(10000),
  extraction_agent_config: z.object({}).optional(),
  use_multimodal_parsing: z.boolean().optional().default(false),
  use_pixel_extraction: z.boolean().optional().default(false),
  llama_parse_params: zLlamaParseParameters.optional(),
});

export const zBodyRunJobTestUserApiV1ExtractionJobsTestPost = z.object({
  job_create: zExtractJobCreate,
  extract_settings: z.union([zLlamaExtractSettings, z.null()]).optional(),
});

export const zBodyScreenshotApiParsingScreenshotPost = z.object({
  file: z.union([z.string(), z.null()]).optional(),
  do_not_cache: z.boolean().optional().default(false),
  http_proxy: z.string().optional(),
  input_s3_path: z.string().optional().default(""),
  input_s3_region: z.string().optional().default(""),
  input_url: z.string().optional(),
  invalidate_cache: z.boolean().optional().default(false),
  max_pages: z.union([z.number().int(), z.null()]).optional(),
  output_s3_path_prefix: z.string().optional().default(""),
  output_s3_region: z.string().optional().default(""),
  target_pages: z.string().optional().default(""),
  webhook_url: z.string().optional().default(""),
  job_timeout_in_seconds: z.number().optional(),
  job_timeout_extra_time_per_page_in_seconds: z.number().optional(),
});

export const zBodyScreenshotApiV1ParsingScreenshotPost = z.object({
  file: z.union([z.string(), z.null()]).optional(),
  do_not_cache: z.boolean().optional().default(false),
  http_proxy: z.string().optional(),
  input_s3_path: z.string().optional().default(""),
  input_s3_region: z.string().optional().default(""),
  input_url: z.string().optional(),
  invalidate_cache: z.boolean().optional().default(false),
  max_pages: z.union([z.number().int(), z.null()]).optional(),
  output_s3_path_prefix: z.string().optional().default(""),
  output_s3_region: z.string().optional().default(""),
  target_pages: z.string().optional().default(""),
  webhook_url: z.string().optional().default(""),
  job_timeout_in_seconds: z.number().optional(),
  job_timeout_extra_time_per_page_in_seconds: z.number().optional(),
});

export const zBodyUploadFileApiParsingUploadPost = z.object({
  file: z.union([z.string(), z.null()]).optional(),
  adaptive_long_table: z.boolean().optional().default(false),
  annotate_links: z.boolean().optional().default(false),
  auto_mode: z.boolean().optional().default(false),
  auto_mode_trigger_on_image_in_page: z.boolean().optional().default(false),
  auto_mode_trigger_on_table_in_page: z.boolean().optional().default(false),
  auto_mode_trigger_on_text_in_page: z.string().optional(),
  auto_mode_trigger_on_regexp_in_page: z.string().optional(),
  auto_mode_configuration_json: z.string().optional(),
  azure_openai_api_version: z.string().optional(),
  azure_openai_deployment_name: z.string().optional(),
  azure_openai_endpoint: z.string().optional(),
  azure_openai_key: z.string().optional(),
  bbox_bottom: z.number().optional(),
  bbox_left: z.number().optional(),
  bbox_right: z.number().optional(),
  bbox_top: z.number().optional(),
  compact_markdown_table: z.boolean().optional().default(false),
  disable_ocr: z.boolean().optional().default(false),
  disable_reconstruction: z.boolean().optional().default(false),
  disable_image_extraction: z.boolean().optional().default(false),
  do_not_cache: z.boolean().optional().default(false),
  do_not_unroll_columns: z.boolean().optional().default(false),
  extract_charts: z.boolean().optional().default(false),
  guess_xlsx_sheet_name: z.boolean().optional().default(false),
  high_res_ocr: z.boolean().optional().default(false),
  html_make_all_elements_visible: z.boolean().optional().default(false),
  html_remove_fixed_elements: z.boolean().optional().default(false),
  html_remove_navigation_elements: z.boolean().optional().default(false),
  http_proxy: z.string().optional(),
  input_s3_path: z.string().optional().default(""),
  input_s3_region: z.string().optional().default(""),
  input_url: z.string().optional(),
  invalidate_cache: z.boolean().optional().default(false),
  language: z.array(zParserLanguages).optional().default(["en"]),
  extract_layout: z.boolean().optional().default(false),
  max_pages: z.union([z.number().int(), z.null()]).optional(),
  merge_tables_across_pages_in_markdown: z.boolean().optional().default(false),
  outlined_table_extraction: z.boolean().optional().default(false),
  output_pdf_of_document: z.boolean().optional().default(false),
  output_s3_path_prefix: z.string().optional().default(""),
  output_s3_region: z.string().optional().default(""),
  page_prefix: z.string().optional().default(""),
  page_separator: z.string().optional(),
  page_suffix: z.string().optional().default(""),
  preserve_layout_alignment_across_pages: z.boolean().optional().default(false),
  skip_diagonal_text: z.boolean().optional().default(false),
  spreadsheet_extract_sub_tables: z.boolean().optional().default(true),
  structured_output: z.boolean().optional().default(false),
  structured_output_json_schema: z.string().optional(),
  structured_output_json_schema_name: z.string().optional(),
  take_screenshot: z.boolean().optional().default(false),
  target_pages: z.string().optional().default(""),
  vendor_multimodal_api_key: z.string().optional().default(""),
  vendor_multimodal_model_name: z.string().optional(),
  model: z.string().optional(),
  webhook_url: z.string().optional().default(""),
  preset: z.string().optional().default(""),
  parse_mode: z.union([zParsingMode, z.null()]).optional(),
  page_error_tolerance: z.number().optional().default(0.05),
  replace_failed_page_mode: z.union([zFailPageMode, z.null()]).optional(),
  replace_failed_page_with_error_message_prefix: z
    .string()
    .optional()
    .default(""),
  replace_failed_page_with_error_message_suffix: z
    .string()
    .optional()
    .default(""),
  system_prompt: z.string().optional().default(""),
  system_prompt_append: z.string().optional().default(""),
  user_prompt: z.string().optional().default(""),
  job_timeout_in_seconds: z.number().optional(),
  job_timeout_extra_time_per_page_in_seconds: z.number().optional(),
  strict_mode_image_extraction: z.boolean().optional().default(false),
  strict_mode_image_ocr: z.boolean().optional().default(false),
  strict_mode_reconstruction: z.boolean().optional().default(false),
  strict_mode_buggy_font: z.boolean().optional().default(false),
  save_images: z.boolean().optional().default(true),
  ignore_document_elements_for_layout_detection: z
    .boolean()
    .optional()
    .default(false),
  output_tables_as_HTML: z.boolean().optional().default(false),
  markdown_table_multiline_header_separator: z.string().optional(),
  use_vendor_multimodal_model: z.boolean().optional().default(false),
  bounding_box: z.string().optional().default(""),
  gpt4o_mode: z.boolean().optional().default(false),
  gpt4o_api_key: z.string().optional().default(""),
  complemental_formatting_instruction: z.string().optional(),
  content_guideline_instruction: z.string().optional(),
  premium_mode: z.boolean().optional().default(false),
  is_formatting_instruction: z.boolean().optional().default(true),
  continuous_mode: z.boolean().optional().default(false),
  parsing_instruction: z.string().optional().default(""),
  fast_mode: z.boolean().optional().default(false),
  formatting_instruction: z.string().optional(),
  hide_headers: z.boolean().optional().default(false),
  hide_footers: z.boolean().optional().default(false),
  page_header_prefix: z.string().optional(),
  page_header_suffix: z.string().optional(),
  page_footer_prefix: z.string().optional(),
  page_footer_suffix: z.string().optional(),
});

export const zBodyUploadFileApiV1FilesPost = z.object({
  upload_file: z.string(),
});

export const zBodyUploadFileApiV1ParsingUploadPost = z.object({
  file: z.union([z.string(), z.null()]).optional(),
  adaptive_long_table: z.boolean().optional().default(false),
  annotate_links: z.boolean().optional().default(false),
  auto_mode: z.boolean().optional().default(false),
  auto_mode_trigger_on_image_in_page: z.boolean().optional().default(false),
  auto_mode_trigger_on_table_in_page: z.boolean().optional().default(false),
  auto_mode_trigger_on_text_in_page: z.string().optional(),
  auto_mode_trigger_on_regexp_in_page: z.string().optional(),
  auto_mode_configuration_json: z.string().optional(),
  azure_openai_api_version: z.string().optional(),
  azure_openai_deployment_name: z.string().optional(),
  azure_openai_endpoint: z.string().optional(),
  azure_openai_key: z.string().optional(),
  bbox_bottom: z.number().optional(),
  bbox_left: z.number().optional(),
  bbox_right: z.number().optional(),
  bbox_top: z.number().optional(),
  compact_markdown_table: z.boolean().optional().default(false),
  disable_ocr: z.boolean().optional().default(false),
  disable_reconstruction: z.boolean().optional().default(false),
  disable_image_extraction: z.boolean().optional().default(false),
  do_not_cache: z.boolean().optional().default(false),
  do_not_unroll_columns: z.boolean().optional().default(false),
  extract_charts: z.boolean().optional().default(false),
  guess_xlsx_sheet_name: z.boolean().optional().default(false),
  high_res_ocr: z.boolean().optional().default(false),
  html_make_all_elements_visible: z.boolean().optional().default(false),
  html_remove_fixed_elements: z.boolean().optional().default(false),
  html_remove_navigation_elements: z.boolean().optional().default(false),
  http_proxy: z.string().optional(),
  input_s3_path: z.string().optional().default(""),
  input_s3_region: z.string().optional().default(""),
  input_url: z.string().optional(),
  invalidate_cache: z.boolean().optional().default(false),
  language: z.array(zParserLanguages).optional().default(["en"]),
  extract_layout: z.boolean().optional().default(false),
  max_pages: z.union([z.number().int(), z.null()]).optional(),
  merge_tables_across_pages_in_markdown: z.boolean().optional().default(false),
  outlined_table_extraction: z.boolean().optional().default(false),
  output_pdf_of_document: z.boolean().optional().default(false),
  output_s3_path_prefix: z.string().optional().default(""),
  output_s3_region: z.string().optional().default(""),
  page_prefix: z.string().optional().default(""),
  page_separator: z.string().optional(),
  page_suffix: z.string().optional().default(""),
  preserve_layout_alignment_across_pages: z.boolean().optional().default(false),
  skip_diagonal_text: z.boolean().optional().default(false),
  spreadsheet_extract_sub_tables: z.boolean().optional().default(true),
  structured_output: z.boolean().optional().default(false),
  structured_output_json_schema: z.string().optional(),
  structured_output_json_schema_name: z.string().optional(),
  take_screenshot: z.boolean().optional().default(false),
  target_pages: z.string().optional().default(""),
  vendor_multimodal_api_key: z.string().optional().default(""),
  vendor_multimodal_model_name: z.string().optional(),
  model: z.string().optional(),
  webhook_url: z.string().optional().default(""),
  preset: z.string().optional().default(""),
  parse_mode: z.union([zParsingMode, z.null()]).optional(),
  page_error_tolerance: z.number().optional().default(0.05),
  replace_failed_page_mode: z.union([zFailPageMode, z.null()]).optional(),
  replace_failed_page_with_error_message_prefix: z
    .string()
    .optional()
    .default(""),
  replace_failed_page_with_error_message_suffix: z
    .string()
    .optional()
    .default(""),
  system_prompt: z.string().optional().default(""),
  system_prompt_append: z.string().optional().default(""),
  user_prompt: z.string().optional().default(""),
  job_timeout_in_seconds: z.number().optional(),
  job_timeout_extra_time_per_page_in_seconds: z.number().optional(),
  strict_mode_image_extraction: z.boolean().optional().default(false),
  strict_mode_image_ocr: z.boolean().optional().default(false),
  strict_mode_reconstruction: z.boolean().optional().default(false),
  strict_mode_buggy_font: z.boolean().optional().default(false),
  save_images: z.boolean().optional().default(true),
  ignore_document_elements_for_layout_detection: z
    .boolean()
    .optional()
    .default(false),
  output_tables_as_HTML: z.boolean().optional().default(false),
  markdown_table_multiline_header_separator: z.string().optional(),
  use_vendor_multimodal_model: z.boolean().optional().default(false),
  bounding_box: z.string().optional().default(""),
  gpt4o_mode: z.boolean().optional().default(false),
  gpt4o_api_key: z.string().optional().default(""),
  complemental_formatting_instruction: z.string().optional(),
  content_guideline_instruction: z.string().optional(),
  premium_mode: z.boolean().optional().default(false),
  is_formatting_instruction: z.boolean().optional().default(true),
  continuous_mode: z.boolean().optional().default(false),
  parsing_instruction: z.string().optional().default(""),
  fast_mode: z.boolean().optional().default(false),
  formatting_instruction: z.string().optional(),
  hide_headers: z.boolean().optional().default(false),
  hide_footers: z.boolean().optional().default(false),
  page_header_prefix: z.string().optional(),
  page_header_suffix: z.string().optional(),
  page_footer_prefix: z.string().optional(),
  page_footer_suffix: z.string().optional(),
});

export const zBoxAuthMechanism = z.enum(["developer_token", "ccg"]);

export const zSupportedLlmModelNames = z.enum([
  "GPT_4O",
  "GPT_4O_MINI",
  "GPT_4_1",
  "GPT_4_1_NANO",
  "GPT_4_1_MINI",
  "AZURE_OPENAI_GPT_4O",
  "AZURE_OPENAI_GPT_4O_MINI",
  "CLAUDE_3_5_SONNET",
  "BEDROCK_CLAUDE_3_5_SONNET_V1",
  "BEDROCK_CLAUDE_3_5_SONNET_V2",
  "VERTEX_AI_CLAUDE_3_5_SONNET_V2",
]);

export const zLlmParameters = z.object({
  model_name: zSupportedLlmModelNames.optional(),
  system_prompt: z.union([z.string().max(3000), z.null()]).optional(),
  temperature: z.union([z.number(), z.null()]).optional(),
  use_chain_of_thought_reasoning: z.union([z.boolean(), z.null()]).optional(),
  use_citation: z.union([z.boolean(), z.null()]).optional(),
  class_name: z.string().optional().default("base_component"),
});

export const zCompositeRetrievalMode = z.enum(["routing", "full"]);

export const zReRankerType = z.enum([
  "system_default",
  "llm",
  "cohere",
  "bedrock",
  "score",
  "disabled",
]);

export const zReRankConfig = z.object({
  top_n: z.number().int().optional().default(6),
  type: zReRankerType.optional(),
});

export const zPresetCompositeRetrievalParams = z.object({
  mode: zCompositeRetrievalMode.optional(),
  rerank_top_n: z.union([z.number().int(), z.null()]).optional(),
  rerank_config: zReRankConfig.optional(),
});

export const zChatApp = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string().min(1).max(3000),
  retriever_id: z.string().uuid(),
  llm_config: zLlmParameters,
  retrieval_config: zPresetCompositeRetrievalParams,
  project_id: z.string().uuid(),
});

export const zChatAppCreate = z.object({
  name: z.string().min(1).max(3000),
  retriever_id: z.string().uuid(),
  llm_config: zLlmParameters,
  retrieval_config: zPresetCompositeRetrievalParams,
});

export const zChatAppResponse = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string().min(1).max(3000),
  retriever_id: z.string().uuid(),
  llm_config: zLlmParameters,
  retrieval_config: zPresetCompositeRetrievalParams,
  project_id: z.string().uuid(),
  retriever_name: z.string(),
});

export const zChatAppUpdate = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  llm_config: z.union([zLlmParameters, z.null()]).optional(),
  retrieval_config: z
    .union([zPresetCompositeRetrievalParams, z.null()])
    .optional(),
});

export const zFilterOperator = z.enum([
  "==",
  ">",
  "<",
  "!=",
  ">=",
  "<=",
  "in",
  "nin",
  "any",
  "all",
  "text_match",
  "text_match_insensitive",
  "contains",
  "is_empty",
]);

export const zMetadataFilter = z.object({
  key: z.string(),
  value: z.union([
    z.number().int(),
    z.number(),
    z.string(),
    z.array(z.string()),
    z.array(z.number()),
    z.array(z.number().int()),
    z.null(),
  ]),
  operator: zFilterOperator.optional(),
});

export const zFilterCondition: z.ZodTypeAny = z.enum(["and", "or", "not"]);

export const zMetadataFilters: z.AnyZodObject = z.object({
  filters: z.array(z.unknown()),
  condition: z.union([zFilterCondition, z.null()]).optional(),
});

export const zRetrievalMode: z.ZodTypeAny = z.enum([
  "chunks",
  "files_via_metadata",
  "files_via_content",
  "auto_routed",
]);

export const zPresetRetrievalParams: z.AnyZodObject = z.object({
  dense_similarity_top_k: z
    .union([z.number().int().gte(1).lte(100), z.null()])
    .optional(),
  dense_similarity_cutoff: z
    .union([z.number().gte(0).lte(1), z.null()])
    .optional(),
  sparse_similarity_top_k: z
    .union([z.number().int().gte(1).lte(100), z.null()])
    .optional(),
  enable_reranking: z.union([z.boolean(), z.null()]).optional(),
  rerank_top_n: z
    .union([z.number().int().gte(1).lte(100), z.null()])
    .optional(),
  alpha: z.union([z.number().gte(0).lte(1), z.null()]).optional(),
  search_filters: z.union([zMetadataFilters, z.null()]).optional(),
  search_filters_inference_schema: z.union([z.object({}), z.null()]).optional(),
  files_top_k: z.union([z.number().int().gte(1).lte(5), z.null()]).optional(),
  retrieval_mode: zRetrievalMode.optional(),
  retrieve_image_nodes: z.boolean().optional().default(false),
  retrieve_page_screenshot_nodes: z.boolean().optional().default(false),
  retrieve_page_figure_nodes: z.boolean().optional().default(false),
  class_name: z.string().optional().default("base_component"),
});

export const zChatData: z.AnyZodObject = z.object({
  retrieval_parameters: zPresetRetrievalParams.optional(),
  llm_parameters: z.union([zLlmParameters, z.null()]).optional(),
  class_name: z.string().optional().default("base_component"),
});

export const zChatInputParams = z.object({
  messages: z.array(zInputMessage).min(1).optional(),
  data: zChatData.optional(),
  class_name: z.string().optional().default("base_component"),
});

export const zClassificationResult = z.object({
  file_id: z.string().uuid(),
  type: z.string(),
  confidence: z.number().gte(0).lte(1),
  matched_rule: z.union([z.string(), z.null()]),
});

export const zClassifyResponse = z.object({
  items: z.array(zClassificationResult),
  next_page_token: z.union([z.string(), z.null()]).optional(),
  total_size: z.union([z.number().int(), z.null()]).optional(),
  unknown_count: z.number().int().gte(0),
});

export const zCloudAzStorageBlobDataSource = z.object({
  supports_access_control: z.boolean().optional().default(false),
  container_name: z.string(),
  account_url: z.string(),
  blob: z.union([z.string(), z.null()]).optional(),
  prefix: z.union([z.string(), z.null()]).optional(),
  account_name: z.union([z.string(), z.null()]).optional(),
  account_key: z.union([z.string(), z.null()]).optional(),
  tenant_id: z.union([z.string(), z.null()]).optional(),
  client_id: z.union([z.string(), z.null()]).optional(),
  client_secret: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudAzStorageBlobDataSource"),
});

export const zCloudAzureAiSearchVectorStore = z.object({
  supports_nested_metadata_filters: z.literal(true).optional().default(true),
  search_service_api_key: z.string(),
  search_service_endpoint: z.string(),
  search_service_api_version: z.union([z.string(), z.null()]).optional(),
  index_name: z.union([z.string(), z.null()]).optional(),
  filterable_metadata_field_keys: z.union([z.object({}), z.null()]).optional(),
  embedding_dimension: z.union([z.number().int(), z.null()]).optional(),
  client_id: z.union([z.string(), z.null()]).optional(),
  client_secret: z.union([z.string(), z.null()]).optional(),
  tenant_id: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudAzureAISearchVectorStore"),
});

export const zCloudBoxDataSource = z.object({
  supports_access_control: z.boolean().optional().default(false),
  folder_id: z.union([z.string(), z.null()]).optional(),
  authentication_mechanism: zBoxAuthMechanism,
  developer_token: z.union([z.string(), z.null()]).optional(),
  client_id: z.union([z.string(), z.null()]).optional(),
  client_secret: z.union([z.string(), z.null()]).optional(),
  user_id: z.union([z.string(), z.null()]).optional(),
  enterprise_id: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudBoxDataSource"),
});

export const zCloudConfluenceDataSource = z.object({
  supports_access_control: z.boolean().optional().default(false),
  server_url: z.string(),
  authentication_mechanism: z.string(),
  user_name: z.union([z.string(), z.null()]).optional(),
  api_token: z.union([z.string(), z.null()]).optional(),
  space_key: z.union([z.string(), z.null()]).optional(),
  page_ids: z.union([z.string(), z.null()]).optional(),
  cql: z.union([z.string(), z.null()]).optional(),
  label: z.union([z.string(), z.null()]).optional(),
  index_restricted_pages: z.boolean().optional().default(false),
  keep_markdown_format: z.boolean().optional().default(true),
  class_name: z.string().optional().default("CloudConfluenceDataSource"),
});

export const zCloudDocument = z.object({
  text: z.string(),
  metadata: z.object({}),
  excluded_embed_metadata_keys: z.array(z.string()).optional().default([]),
  excluded_llm_metadata_keys: z.array(z.string()).optional().default([]),
  page_positions: z.union([z.array(z.number().int()), z.null()]).optional(),
  id: z.string(),
});

export const zCloudDocumentCreate = z.object({
  text: z.string(),
  metadata: z.object({}),
  excluded_embed_metadata_keys: z.array(z.string()).optional().default([]),
  excluded_llm_metadata_keys: z.array(z.string()).optional().default([]),
  page_positions: z.union([z.array(z.number().int()), z.null()]).optional(),
  id: z.union([z.string(), z.null()]).optional(),
});

export const zCloudJiraDataSource = z.object({
  supports_access_control: z.boolean().optional().default(false),
  email: z.union([z.string(), z.null()]).optional(),
  api_token: z.union([z.string(), z.null()]).optional(),
  server_url: z.union([z.string(), z.null()]).optional(),
  cloud_id: z.union([z.string(), z.null()]).optional(),
  authentication_mechanism: z.string(),
  query: z.string(),
  class_name: z.string().optional().default("CloudJiraDataSource"),
});

export const zCloudMilvusVectorStore = z.object({
  supports_nested_metadata_filters: z.boolean().optional().default(false),
  uri: z.string(),
  collection_name: z.union([z.string(), z.null()]).optional(),
  token: z.union([z.string(), z.null()]).optional(),
  embedding_dimension: z.union([z.number().int(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudMilvusVectorStore"),
});

export const zCloudMongoDbAtlasVectorSearch = z.object({
  supports_nested_metadata_filters: z.boolean().optional().default(false),
  mongodb_uri: z.string(),
  db_name: z.string(),
  collection_name: z.string(),
  vector_index_name: z.union([z.string(), z.null()]).optional(),
  fulltext_index_name: z.union([z.string(), z.null()]).optional(),
  embedding_dimension: z.union([z.number().int(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudMongoDBAtlasVectorSearch"),
});

export const zCloudNotionPageDataSource = z.object({
  supports_access_control: z.boolean().optional().default(false),
  integration_token: z.string(),
  database_ids: z.union([z.string(), z.null()]).optional(),
  page_ids: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudNotionPageDataSource"),
});

export const zCloudOneDriveDataSource = z.object({
  supports_access_control: z.literal(true).optional().default(true),
  user_principal_name: z.string(),
  folder_path: z.union([z.string(), z.null()]).optional(),
  folder_id: z.union([z.string(), z.null()]).optional(),
  client_id: z.string(),
  client_secret: z.string(),
  tenant_id: z.string(),
  required_exts: z.union([z.array(z.string()), z.null()]).optional(),
  class_name: z.string().optional().default("CloudOneDriveDataSource"),
});

export const zCloudPineconeVectorStore = z.object({
  supports_nested_metadata_filters: z.literal(true).optional().default(true),
  api_key: z.string(),
  index_name: z.string(),
  namespace: z.union([z.string(), z.null()]).optional(),
  insert_kwargs: z.union([z.object({}), z.null()]).optional(),
  class_name: z.string().optional().default("CloudPineconeVectorStore"),
});

export const zPgVectorVectorType = z.enum([
  "vector",
  "half_vec",
  "bit",
  "sparse_vec",
]);

export const zPgVectorDistanceMethod = z.enum([
  "l2",
  "ip",
  "cosine",
  "l1",
  "hamming",
  "jaccard",
]);

export const zPgVectorHnswSettings = z.object({
  ef_construction: z.number().int().gte(1).optional().default(64),
  ef_search: z.number().int().gte(1).optional().default(40),
  m: z.number().int().gte(1).optional().default(16),
  vector_type: zPgVectorVectorType.optional(),
  distance_method: zPgVectorDistanceMethod.optional(),
});

export const zCloudPostgresVectorStore = z.object({
  supports_nested_metadata_filters: z.boolean().optional().default(true),
  database: z.string(),
  host: z.string(),
  password: z.string(),
  port: z.number().int(),
  user: z.string(),
  table_name: z.string(),
  schema_name: z.string(),
  embed_dim: z.number().int(),
  hybrid_search: z.union([z.boolean(), z.null()]).optional(),
  perform_setup: z.boolean().optional().default(true),
  hnsw_settings: z.union([zPgVectorHnswSettings, z.null()]).optional(),
  class_name: z.string().optional().default("CloudPostgresVectorStore"),
});

export const zCloudQdrantVectorStore = z.object({
  supports_nested_metadata_filters: z.literal(true).optional().default(true),
  collection_name: z.string(),
  url: z.string(),
  api_key: z.string(),
  max_retries: z.number().int().optional().default(3),
  client_kwargs: z.object({}).optional(),
  class_name: z.string().optional().default("CloudQdrantVectorStore"),
});

export const zCloudS3DataSource = z.object({
  supports_access_control: z.boolean().optional().default(false),
  bucket: z.string(),
  prefix: z.union([z.string(), z.null()]).optional(),
  regex_pattern: z.union([z.string(), z.null()]).optional(),
  aws_access_id: z.union([z.string(), z.null()]).optional(),
  aws_access_secret: z.union([z.string(), z.null()]).optional(),
  s3_endpoint_url: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudS3DataSource"),
});

export const zCloudSharepointDataSource = z.object({
  supports_access_control: z.literal(true).optional().default(true),
  site_name: z.union([z.string(), z.null()]).optional(),
  site_id: z.union([z.string(), z.null()]).optional(),
  folder_path: z.union([z.string(), z.null()]).optional(),
  folder_id: z.union([z.string(), z.null()]).optional(),
  drive_name: z.union([z.string(), z.null()]).optional(),
  client_id: z.string(),
  client_secret: z.string(),
  tenant_id: z.string(),
  required_exts: z.union([z.array(z.string()), z.null()]).optional(),
  get_permissions: z.union([z.boolean(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudSharepointDataSource"),
});

export const zCloudSlackDataSource = z.object({
  supports_access_control: z.boolean().optional().default(false),
  slack_token: z.string(),
  channel_ids: z.union([z.string(), z.null()]).optional(),
  latest_date: z.union([z.string(), z.null()]).optional(),
  earliest_date: z.union([z.string(), z.null()]).optional(),
  earliest_date_timestamp: z.union([z.number(), z.null()]).optional(),
  latest_date_timestamp: z.union([z.number(), z.null()]).optional(),
  channel_patterns: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("CloudSlackDataSource"),
});

export const zCohereEmbedding = z.object({
  model_name: z.string().optional().default("embed-english-v3.0"),
  embed_batch_size: z.number().int().lte(2048).optional().default(10),
  num_workers: z.union([z.number().int(), z.null()]).optional(),
  api_key: z.union([z.string(), z.null()]),
  truncate: z.string().optional().default("END"),
  input_type: z.union([z.string(), z.null()]).optional(),
  embedding_type: z.string().optional().default("float"),
  class_name: z.string().optional().default("CohereEmbedding"),
});

export const zCohereEmbeddingConfig = z.object({
  type: z.literal("COHERE_EMBEDDING").optional().default("COHERE_EMBEDDING"),
  component: zCohereEmbedding.optional(),
});

export const zCompositeRetrievalParams = z.object({
  mode: zCompositeRetrievalMode.optional(),
  rerank_top_n: z.union([z.number().int(), z.null()]).optional(),
  rerank_config: zReRankConfig.optional(),
  query: z.string().min(1),
});

export const zCompositeRetrievedTextNode = z.object({
  id: z.string().uuid(),
  retriever_id: z.string().uuid(),
  retriever_pipeline_name: z.string(),
  pipeline_id: z.string().uuid(),
  metadata: z.object({}).optional(),
  text: z.string(),
  start_char_idx: z.union([z.number().int(), z.null()]),
  end_char_idx: z.union([z.number().int(), z.null()]),
});

export const zCompositeRetrievedTextNodeWithScore = z.object({
  node: zCompositeRetrievedTextNode,
  score: z.union([z.number(), z.null()]).optional(),
  class_name: z
    .string()
    .optional()
    .default("CompositeRetrievedTextNodeWithScore"),
});

export const zPageScreenshotMetadata = z.object({
  page_index: z.number().int().gte(0),
  file_id: z.string().uuid(),
  image_size: z.number().int().gte(0),
  metadata: z.union([z.object({}), z.null()]).optional(),
});

export const zPageScreenshotNodeWithScore = z.object({
  node: zPageScreenshotMetadata,
  score: z.number(),
  class_name: z.string().optional().default("NodeWithScore"),
});

export const zPageFigureMetadata = z.object({
  figure_name: z.string(),
  file_id: z.string().uuid(),
  page_index: z.number().int().gte(0),
  figure_size: z.number().int().gte(0),
  is_likely_noise: z.boolean().optional().default(false),
  confidence: z.number().gte(0).lte(1),
  metadata: z.union([z.object({}), z.null()]).optional(),
});

export const zPageFigureNodeWithScore = z.object({
  node: zPageFigureMetadata,
  score: z.number(),
  class_name: z.string().optional().default("PageFigureNodeWithScore"),
});

export const zCompositeRetrievalResult = z.object({
  nodes: z.array(zCompositeRetrievedTextNodeWithScore).optional(),
  image_nodes: z.array(zPageScreenshotNodeWithScore).optional(),
  page_figure_nodes: z.array(zPageFigureNodeWithScore).optional(),
});

export const zConfigurableDataSinkNames = z.enum([
  "PINECONE",
  "POSTGRES",
  "QDRANT",
  "AZUREAI_SEARCH",
  "MONGODB_ATLAS",
  "MILVUS",
]);

export const zConfigurableDataSourceNames = z.enum([
  "S3",
  "AZURE_STORAGE_BLOB",
  "GOOGLE_DRIVE",
  "MICROSOFT_ONEDRIVE",
  "MICROSOFT_SHAREPOINT",
  "SLACK",
  "NOTION_PAGE",
  "CONFLUENCE",
  "JIRA",
  "BOX",
]);

export const zCreateIntentAndCustomerSessionResponse = z.object({
  client_secret: z.string(),
  customer_session_client_secret: z.union([z.string(), z.null()]),
});

export const zCustomerPortalSessionCreatePayload = z.object({
  return_url: z.string().url().min(1),
});

export const zDataSink = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string(),
  sink_type: zConfigurableDataSinkNames,
  component: z.union([
    z.object({}),
    zCloudPineconeVectorStore,
    zCloudPostgresVectorStore,
    zCloudQdrantVectorStore,
    zCloudAzureAiSearchVectorStore,
    zCloudMongoDbAtlasVectorSearch,
    zCloudMilvusVectorStore,
  ]),
  project_id: z.string().uuid(),
});

export const zDataSinkCreate = z.object({
  name: z.string(),
  sink_type: zConfigurableDataSinkNames,
  component: z.union([
    z.object({}),
    zCloudPineconeVectorStore,
    zCloudPostgresVectorStore,
    zCloudQdrantVectorStore,
    zCloudAzureAiSearchVectorStore,
    zCloudMongoDbAtlasVectorSearch,
    zCloudMilvusVectorStore,
  ]),
});

export const zDataSinkUpdate = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  sink_type: zConfigurableDataSinkNames,
  component: z
    .union([
      z.object({}),
      zCloudPineconeVectorStore,
      zCloudPostgresVectorStore,
      zCloudQdrantVectorStore,
      zCloudAzureAiSearchVectorStore,
      zCloudMongoDbAtlasVectorSearch,
      zCloudMilvusVectorStore,
      z.null(),
    ])
    .optional(),
});

export const zDataSourceReaderVersionMetadata = z.object({
  reader_version: z.union([z.string(), z.null()]).optional(),
});

export const zDataSource = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string(),
  source_type: zConfigurableDataSourceNames,
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  component: z.union([
    z.object({}),
    zCloudS3DataSource,
    zCloudAzStorageBlobDataSource,
    zCloudOneDriveDataSource,
    zCloudSharepointDataSource,
    zCloudSlackDataSource,
    zCloudNotionPageDataSource,
    zCloudConfluenceDataSource,
    zCloudJiraDataSource,
    zCloudBoxDataSource,
  ]),
  version_metadata: z
    .union([zDataSourceReaderVersionMetadata, z.null()])
    .optional(),
  project_id: z.string().uuid(),
});

export const zDataSourceCreate = z.object({
  name: z.string(),
  source_type: zConfigurableDataSourceNames,
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  component: z.union([
    z.object({}),
    zCloudS3DataSource,
    zCloudAzStorageBlobDataSource,
    zCloudOneDriveDataSource,
    zCloudSharepointDataSource,
    zCloudSlackDataSource,
    zCloudNotionPageDataSource,
    zCloudConfluenceDataSource,
    zCloudJiraDataSource,
    zCloudBoxDataSource,
  ]),
});

export const zDataSourceUpdate = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  source_type: zConfigurableDataSourceNames,
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  component: z
    .union([
      z.object({}),
      zCloudS3DataSource,
      zCloudAzStorageBlobDataSource,
      zCloudOneDriveDataSource,
      zCloudSharepointDataSource,
      zCloudSlackDataSource,
      zCloudNotionPageDataSource,
      zCloudConfluenceDataSource,
      zCloudJiraDataSource,
      zCloudBoxDataSource,
      z.null(),
    ])
    .optional(),
});

export const zDeleteParams = z.object({
  document_ids_to_delete: z.union([z.array(z.string()), z.null()]).optional(),
  files_ids_to_delete: z
    .union([z.array(z.string().uuid()), z.null()])
    .optional(),
  data_sources_ids_to_delete: z
    .union([z.array(z.string().uuid()), z.null()])
    .optional(),
  embed_collection_name: z.union([z.string(), z.null()]).optional(),
  data_sink_id: z.union([z.string().uuid(), z.null()]).optional(),
});

export const zDataSourceUpdateDispatcherConfig = z.object({
  type: z
    .literal("data_source_update_dispatcher")
    .optional()
    .default("data_source_update_dispatcher"),
  should_delete: z.union([z.boolean(), z.null()]).optional(),
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  delete_info: z.union([zDeleteParams, z.null()]).optional(),
});

export const zDefaultOrganizationUpdate = z.object({
  organization_id: z.string().uuid(),
});

export const zRetrieverPipeline = z.object({
  name: z.union([z.string().min(1).max(3000), z.null()]),
  description: z.union([z.string().max(15000), z.null()]),
  pipeline_id: z.string().uuid(),
  preset_retrieval_parameters: zPresetRetrievalParams.optional(),
});

export const zDirectRetrievalParams = z.object({
  mode: zCompositeRetrievalMode.optional(),
  rerank_top_n: z.union([z.number().int(), z.null()]).optional(),
  rerank_config: zReRankConfig.optional(),
  query: z.string().min(1),
  pipelines: z.array(zRetrieverPipeline).optional(),
});

export const zDocumentBlock = z.object({
  block_type: z.literal("document").optional().default("document"),
  data: z.union([z.string(), z.null()]).optional(),
  path: z.union([z.string(), z.null()]).optional(),
  url: z.union([z.string(), z.null()]).optional(),
  title: z.union([z.string(), z.null()]).optional(),
  document_mimetype: z.union([z.string(), z.null()]).optional(),
});

export const zDocumentIngestionJobParams = z.object({
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  resource_info: z.union([z.object({}), z.null()]).optional(),
  type: z
    .literal("document_ingestion")
    .optional()
    .default("document_ingestion"),
  should_delete: z.union([z.boolean(), z.null()]).optional(),
  document_ids: z.union([z.array(z.string()), z.null()]).optional(),
  pipeline_file_id: z.union([z.string().uuid(), z.null()]).optional(),
  delete_info: z.union([zDeleteParams, z.null()]).optional(),
  is_new_file: z.boolean().optional().default(false),
  page_count: z.union([z.number().int(), z.null()]).optional(),
});

export const zTextNode = z.object({
  id_: z.string().optional(),
  embedding: z.union([z.array(z.number()), z.null()]).optional(),
  extra_info: z.object({}).optional(),
  excluded_embed_metadata_keys: z.array(z.string()).optional(),
  excluded_llm_metadata_keys: z.array(z.string()).optional(),
  relationships: z.object({}).optional(),
  metadata_template: z.string().optional().default("{key}: {value}"),
  metadata_seperator: z.string().optional().default(`
`),
  text: z.string().optional().default(""),
  mimetype: z.string().optional().default("text/plain"),
  start_char_idx: z.union([z.number().int(), z.null()]).optional(),
  end_char_idx: z.union([z.number().int(), z.null()]).optional(),
  text_template: z.string().optional().default(`{metadata_str}

{content}`),
  class_name: z.string().optional().default("TextNode"),
});

export const zTextNodeWithScore = z.object({
  node: zTextNode,
  score: z.union([z.number(), z.null()]).optional(),
  class_name: z.string().optional().default("TextNodeWithScore"),
});

export const zReportBlock = z.object({
  idx: z.number().int(),
  template: z.string(),
  requires_human_review: z.boolean().optional().default(false),
  sources: z.array(zTextNodeWithScore).optional(),
});

export const zReportQuery = z.object({
  field: z.string(),
  prompt: z.string(),
  context: z.string(),
});

export const zReportBlockDependency = z.enum([
  "none",
  "all",
  "previous",
  "next",
]);

export const zReportPlanBlock = z.object({
  block: zReportBlock,
  queries: z.array(zReportQuery).optional(),
  dependency: zReportBlockDependency,
});

export const zEditSuggestion = z.object({
  justification: z.string(),
  blocks: z.array(z.unknown()),
  removed_indices: z.array(z.number().int()).optional(),
});

export const zTextBlock = z.object({
  block_type: z.literal("text").optional().default("text"),
  text: z.string(),
});

export const zImageBlock = z.object({
  block_type: z.literal("image").optional().default("image"),
  image: z.union([z.string(), z.null()]).optional(),
  path: z.union([z.string(), z.null()]).optional(),
  url: z.union([z.string().url().min(1), z.null()]).optional(),
  image_mimetype: z.union([z.string(), z.null()]).optional(),
  detail: z.union([z.string(), z.null()]).optional(),
});

export const zLlamaIndexCoreBaseLlmsTypesChatMessage = z.object({
  role: zMessageRole.optional(),
  additional_kwargs: z.object({}).optional(),
  blocks: z.array(z.unknown()).optional(),
});

export const zEditSuggestionCreate = z.object({
  user_query: z.string(),
  chat_history: z.array(zLlamaIndexCoreBaseLlmsTypesChatMessage),
});

export const zGeminiEmbedding = z.object({
  model_name: z.string().optional().default("models/embedding-001"),
  embed_batch_size: z.number().int().lte(2048).optional().default(10),
  num_workers: z.union([z.number().int(), z.null()]).optional(),
  title: z.union([z.string(), z.null()]).optional(),
  task_type: z.union([z.string(), z.null()]).optional(),
  api_key: z.union([z.string(), z.null()]).optional(),
  api_base: z.union([z.string(), z.null()]).optional(),
  transport: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("GeminiEmbedding"),
});

export const zGeminiEmbeddingConfig = z.object({
  type: z.literal("GEMINI_EMBEDDING").optional().default("GEMINI_EMBEDDING"),
  component: zGeminiEmbedding.optional(),
});

export const zPooling = z.enum(["cls", "mean", "last"]);

export const zHuggingFaceInferenceApiEmbedding = z.object({
  model_name: z.union([z.string(), z.null()]).optional(),
  embed_batch_size: z.number().int().lte(2048).optional().default(10),
  num_workers: z.union([z.number().int(), z.null()]).optional(),
  pooling: z.union([zPooling, z.null()]).optional(),
  query_instruction: z.union([z.string(), z.null()]).optional(),
  text_instruction: z.union([z.string(), z.null()]).optional(),
  token: z.union([z.string(), z.boolean(), z.null()]).optional(),
  timeout: z.union([z.number(), z.null()]).optional(),
  headers: z.union([z.object({}), z.null()]).optional(),
  cookies: z.union([z.object({}), z.null()]).optional(),
  task: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("HuggingFaceInferenceAPIEmbedding"),
});

export const zHuggingFaceInferenceApiEmbeddingConfig = z.object({
  type: z
    .literal("HUGGINGFACE_API_EMBEDDING")
    .optional()
    .default("HUGGINGFACE_API_EMBEDDING"),
  component: zHuggingFaceInferenceApiEmbedding.optional(),
});

export const zOpenAiEmbedding = z.object({
  model_name: z.string().optional().default("text-embedding-ada-002"),
  embed_batch_size: z.number().int().lte(2048).optional().default(10),
  num_workers: z.union([z.number().int(), z.null()]).optional(),
  additional_kwargs: z.object({}).optional(),
  api_key: z.union([z.string(), z.null()]).optional(),
  api_base: z.union([z.string(), z.null()]).optional(),
  api_version: z.union([z.string(), z.null()]).optional(),
  max_retries: z.number().int().optional().default(10),
  timeout: z.number().optional().default(60),
  default_headers: z.union([z.object({}), z.null()]).optional(),
  reuse_client: z.boolean().optional().default(true),
  dimensions: z.union([z.number().int(), z.null()]).optional(),
  class_name: z.string().optional().default("OpenAIEmbedding"),
});

export const zOpenAiEmbeddingConfig = z.object({
  type: z.literal("OPENAI_EMBEDDING").optional().default("OPENAI_EMBEDDING"),
  component: zOpenAiEmbedding.optional(),
});

export const zVertexEmbeddingMode = z.enum([
  "default",
  "classification",
  "clustering",
  "similarity",
  "retrieval",
]);

export const zVertexTextEmbedding = z.object({
  model_name: z.string().optional().default("textembedding-gecko@003"),
  embed_batch_size: z.number().int().lte(2048).optional().default(10),
  num_workers: z.union([z.number().int(), z.null()]).optional(),
  location: z.string(),
  project: z.string(),
  embed_mode: zVertexEmbeddingMode.optional(),
  additional_kwargs: z.object({}).optional(),
  client_email: z.union([z.string(), z.null()]),
  token_uri: z.union([z.string(), z.null()]),
  private_key_id: z.union([z.string(), z.null()]),
  private_key: z.union([z.string(), z.null()]),
  class_name: z.string().optional().default("VertexTextEmbedding"),
});

export const zVertexAiEmbeddingConfig = z.object({
  type: z
    .literal("VERTEXAI_EMBEDDING")
    .optional()
    .default("VERTEXAI_EMBEDDING"),
  component: zVertexTextEmbedding.optional(),
});

export const zEmbeddingModelConfig = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string(),
  embedding_config: z.union([
    z
      .object({
        type: z.literal("AZURE_EMBEDDING"),
      })
      .and(zAzureOpenAiEmbeddingConfig),
    z
      .object({
        type: z.literal("COHERE_EMBEDDING"),
      })
      .and(zCohereEmbeddingConfig),
    z
      .object({
        type: z.literal("GEMINI_EMBEDDING"),
      })
      .and(zGeminiEmbeddingConfig),
    z
      .object({
        type: z.literal("HUGGINGFACE_API_EMBEDDING"),
      })
      .and(zHuggingFaceInferenceApiEmbeddingConfig),
    z
      .object({
        type: z.literal("OPENAI_EMBEDDING"),
      })
      .and(zOpenAiEmbeddingConfig),
    z
      .object({
        type: z.literal("VERTEXAI_EMBEDDING"),
      })
      .and(zVertexAiEmbeddingConfig),
    z
      .object({
        type: z.literal("BEDROCK_EMBEDDING"),
      })
      .and(zBedrockEmbeddingConfig),
  ]),
  project_id: z.string().uuid(),
});

export const zEmbeddingModelConfigCreate = z.object({
  name: z.string(),
  embedding_config: z.union([
    z
      .object({
        type: z.literal("AZURE_EMBEDDING"),
      })
      .and(zAzureOpenAiEmbeddingConfig),
    z
      .object({
        type: z.literal("COHERE_EMBEDDING"),
      })
      .and(zCohereEmbeddingConfig),
    z
      .object({
        type: z.literal("GEMINI_EMBEDDING"),
      })
      .and(zGeminiEmbeddingConfig),
    z
      .object({
        type: z.literal("HUGGINGFACE_API_EMBEDDING"),
      })
      .and(zHuggingFaceInferenceApiEmbeddingConfig),
    z
      .object({
        type: z.literal("OPENAI_EMBEDDING"),
      })
      .and(zOpenAiEmbeddingConfig),
    z
      .object({
        type: z.literal("VERTEXAI_EMBEDDING"),
      })
      .and(zVertexAiEmbeddingConfig),
    z
      .object({
        type: z.literal("BEDROCK_EMBEDDING"),
      })
      .and(zBedrockEmbeddingConfig),
  ]),
});

export const zEmbeddingModelConfigUpdate = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  embedding_config: z
    .union([
      z.union([
        z
          .object({
            type: z.literal("AZURE_EMBEDDING"),
          })
          .and(zAzureOpenAiEmbeddingConfig),
        z
          .object({
            type: z.literal("COHERE_EMBEDDING"),
          })
          .and(zCohereEmbeddingConfig),
        z
          .object({
            type: z.literal("GEMINI_EMBEDDING"),
          })
          .and(zGeminiEmbeddingConfig),
        z
          .object({
            type: z.literal("HUGGINGFACE_API_EMBEDDING"),
          })
          .and(zHuggingFaceInferenceApiEmbeddingConfig),
        z
          .object({
            type: z.literal("OPENAI_EMBEDDING"),
          })
          .and(zOpenAiEmbeddingConfig),
        z
          .object({
            type: z.literal("VERTEXAI_EMBEDDING"),
          })
          .and(zVertexAiEmbeddingConfig),
        z
          .object({
            type: z.literal("BEDROCK_EMBEDDING"),
          })
          .and(zBedrockEmbeddingConfig),
      ]),
      z.null(),
    ])
    .optional(),
});

export const zEvalExecutionParams = z.object({
  llm_model: zSupportedLlmModelNames.optional(),
  qa_prompt_tmpl: z.string().optional().default(`Context information is below.
---------------------
{context_str}
---------------------
Given the context information and not prior knowledge, answer the query.
Query: {query_str}
Answer: `),
});

export const zExtractAgent = z.object({
  id: z.string().uuid(),
  name: z.string(),
  project_id: z.string().uuid(),
  data_schema: z.object({}),
  config: zExtractConfig,
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
});

export const zExtractAgentCreate = z.object({
  name: z.string().min(1).max(3000),
  data_schema: z.union([z.object({}), z.string()]),
  config: zExtractConfig,
});

export const zExtractAgentUpdate = z.object({
  data_schema: z.union([z.object({}), z.string()]),
  config: zExtractConfig,
});

export const zStatusEnum = z.enum([
  "PENDING",
  "SUCCESS",
  "ERROR",
  "PARTIAL_SUCCESS",
  "CANCELLED",
]);

export const zFile = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string().min(1).max(3000),
  external_file_id: z.string(),
  file_size: z.union([z.number().int().gte(0), z.null()]).optional(),
  file_type: z.union([z.string().min(1).max(3000), z.null()]).optional(),
  project_id: z.string().uuid(),
  last_modified_at: z.union([z.string().datetime(), z.null()]).optional(),
  resource_info: z.union([z.object({}), z.null()]).optional(),
  permission_info: z.union([z.object({}), z.null()]).optional(),
  data_source_id: z.union([z.string().uuid(), z.null()]).optional(),
});

export const zExtractJob = z.object({
  id: z.string().uuid(),
  extraction_agent: zExtractAgent,
  status: zStatusEnum,
  error: z.union([z.string(), z.null()]).optional(),
  file: zFile,
});

export const zExtractJobCreateBatch = z.object({
  extraction_agent_id: z.string().uuid(),
  file_ids: z.array(z.string().uuid()).min(1),
  data_schema_override: z
    .union([z.object({}), z.string(), z.null()])
    .optional(),
  config_override: z.union([zExtractConfig, z.null()]).optional(),
});

export const zExtractModels = z.enum([
  "gpt-4.1",
  "gpt-4.1-mini",
  "gpt-4.1-nano",
  "gemini-2.0-flash",
  "o3-mini",
  "gemini-2.5-flash",
  "gemini-2.5-pro",
  "gemini-2.5-flash-lite-preview-06-17",
  "gpt-4o",
  "gpt-4o-mini",
]);

export const zExtractResultset = z.object({
  run_id: z.string().uuid(),
  extraction_agent_id: z.string().uuid(),
  data: z.union([z.object({}), z.array(z.object({})), z.null()]),
  extraction_metadata: z.object({}),
});

export const zExtractState = z.enum(["CREATED", "PENDING", "SUCCESS", "ERROR"]);

export const zExtractRun = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  extraction_agent_id: z.string().uuid(),
  data_schema: z.object({}),
  config: zExtractConfig,
  file: zFile,
  status: zExtractState,
  error: z.union([z.string(), z.null()]).optional(),
  job_id: z.union([z.string().uuid(), z.null()]).optional(),
  data: z.union([z.object({}), z.array(z.object({})), z.null()]).optional(),
  extraction_metadata: z.union([z.object({}), z.null()]).optional(),
  from_ui: z.boolean(),
});

export const zExtractSchemaGenerateRequest = z.object({
  prompt: z.union([z.string(), z.null()]).optional(),
  file_id: z.union([z.string().uuid(), z.null()]).optional(),
});

export const zExtractSchemaGenerateResponse = z.object({
  data_schema: z.object({}),
});

export const zExtractSchemaValidateRequest = z.object({
  data_schema: z.union([z.object({}), z.string()]),
});

export const zExtractSchemaValidateResponse = z.object({
  data_schema: z.object({}),
});

export const zFileCountByStatusResponse = z.object({
  counts: z.object({}),
  total_count: z.number().int(),
  pipeline_id: z.union([z.string().uuid(), z.null()]).optional(),
  data_source_id: z.union([z.string().uuid(), z.null()]).optional(),
  only_manually_uploaded: z.boolean().optional().default(false),
});

export const zFileCreate = z.object({
  name: z.string().min(1).max(3000),
  external_file_id: z.union([z.string(), z.null()]).optional(),
  file_size: z.union([z.number().int().gte(0), z.null()]).optional(),
  last_modified_at: z.union([z.string().datetime(), z.null()]).optional(),
  resource_info: z.union([z.object({}), z.null()]).optional(),
  permission_info: z.union([z.object({}), z.null()]).optional(),
  data_source_id: z.union([z.string().uuid(), z.null()]).optional(),
});

export const zFileCreateFromUrl = z.object({
  name: z.union([z.string().min(1).max(3000), z.null()]).optional(),
  url: z.string().url().min(1),
  proxy_url: z.union([z.string().url().min(1), z.null()]).optional(),
  request_headers: z.union([z.object({}), z.null()]).optional(),
  verify_ssl: z.boolean().optional().default(true),
  follow_redirects: z.boolean().optional().default(true),
  resource_info: z.union([z.object({}), z.null()]).optional(),
});

export const zFileIdPresignedUrl = z.object({
  url: z.string().url().min(1),
  expires_at: z.string().datetime(),
  form_fields: z.union([z.object({}), z.null()]).optional(),
  file_id: z.string().uuid(),
});

export const zFilterOperation = z.object({
  eq: z.union([z.number(), z.number().int(), z.string(), z.null()]).optional(),
  gt: z.union([z.number(), z.number().int(), z.string(), z.null()]).optional(),
  gte: z.union([z.number(), z.number().int(), z.string(), z.null()]).optional(),
  lt: z.union([z.number(), z.number().int(), z.string(), z.null()]).optional(),
  lte: z.union([z.number(), z.number().int(), z.string(), z.null()]).optional(),
  includes: z.array(z.unknown()).optional(),
});

export const zFreeCreditsUsage = z.object({
  starting_balance: z.number().int(),
  remaining_balance: z.number().int(),
  grant_name: z.string(),
  expires_at: z.string().datetime(),
});

export const zValidationError = z.object({
  loc: z.array(z.unknown()),
  msg: z.string(),
  type: z.string(),
});

export const zHttpValidationError = z.object({
  detail: z.array(zValidationError).optional(),
});

export const zJobNames = z.enum([
  "load_documents_job",
  "load_files_job",
  "playground_job",
  "pipeline_managed_ingestion_job",
  "data_source_managed_ingestion_job",
  "data_source_update_dispatcher_job",
  "pipeline_file_update_dispatcher_job",
  "pipeline_file_updater_job",
  "file_managed_ingestion_job",
  "document_ingestion_job",
  "metadata_update_job",
  "parse_raw_file_job_cached",
  "extraction_job",
  "extract_job",
  "asyncio_test_job",
  "parse_raw_file_job",
  "llama_parse_transform_job",
]);

export const zParseJobConfig = z.object({
  priority: z
    .union([z.enum(["low", "medium", "high", "critical"]), z.null()])
    .optional(),
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  resource_info: z.union([z.object({}), z.null()]).optional(),
  languages: z.array(zParserLanguages).min(1).optional(),
  parsing_instruction: z.union([z.string(), z.null()]).optional(),
  disable_ocr: z.union([z.boolean(), z.null()]).optional(),
  annotate_links: z.union([z.boolean(), z.null()]).optional(),
  adaptive_long_table: z.union([z.boolean(), z.null()]).optional(),
  compact_markdown_table: z.union([z.boolean(), z.null()]).optional(),
  disable_reconstruction: z.union([z.boolean(), z.null()]).optional(),
  disable_image_extraction: z.union([z.boolean(), z.null()]).optional(),
  invalidate_cache: z.union([z.boolean(), z.null()]).optional(),
  outlined_table_extraction: z.union([z.boolean(), z.null()]).optional(),
  merge_tables_across_pages_in_markdown: z
    .union([z.boolean(), z.null()])
    .optional(),
  output_pdf_of_document: z.union([z.boolean(), z.null()]).optional(),
  do_not_cache: z.union([z.boolean(), z.null()]).optional(),
  fast_mode: z.union([z.boolean(), z.null()]).optional(),
  skip_diagonal_text: z.union([z.boolean(), z.null()]).optional(),
  preserve_layout_alignment_across_pages: z
    .union([z.boolean(), z.null()])
    .optional(),
  gpt4o_mode: z.union([z.boolean(), z.null()]).optional(),
  gpt4o_api_key: z.union([z.string(), z.null()]).optional(),
  do_not_unroll_columns: z.union([z.boolean(), z.null()]).optional(),
  extract_layout: z.union([z.boolean(), z.null()]).optional(),
  high_res_ocr: z.union([z.boolean(), z.null()]).optional(),
  html_make_all_elements_visible: z.union([z.boolean(), z.null()]).optional(),
  html_remove_navigation_elements: z.union([z.boolean(), z.null()]).optional(),
  html_remove_fixed_elements: z.union([z.boolean(), z.null()]).optional(),
  guess_xlsx_sheet_name: z.union([z.boolean(), z.null()]).optional(),
  page_separator: z.union([z.string(), z.null()]).optional(),
  bounding_box: z.union([z.string(), z.null()]).optional(),
  bbox_top: z.union([z.number(), z.null()]).optional(),
  bbox_right: z.union([z.number(), z.null()]).optional(),
  bbox_bottom: z.union([z.number(), z.null()]).optional(),
  bbox_left: z.union([z.number(), z.null()]).optional(),
  target_pages: z.union([z.string(), z.null()]).optional(),
  use_vendor_multimodal_model: z.union([z.boolean(), z.null()]).optional(),
  vendor_multimodal_model_name: z.union([z.string(), z.null()]).optional(),
  model: z.union([z.string(), z.null()]).optional(),
  vendor_multimodal_api_key: z.union([z.string(), z.null()]).optional(),
  page_prefix: z.union([z.string(), z.null()]).optional(),
  page_suffix: z.union([z.string(), z.null()]).optional(),
  webhook_url: z.union([z.string(), z.null()]).optional(),
  preset: z.union([z.string(), z.null()]).optional(),
  take_screenshot: z.union([z.boolean(), z.null()]).optional(),
  is_formatting_instruction: z.union([z.boolean(), z.null()]).optional(),
  premium_mode: z.union([z.boolean(), z.null()]).optional(),
  continuous_mode: z.union([z.boolean(), z.null()]).optional(),
  input_s3_path: z.union([z.string(), z.null()]).optional(),
  input_s3_region: z.union([z.string(), z.null()]).optional(),
  output_s3_path_prefix: z.union([z.string(), z.null()]).optional(),
  output_s3_region: z.union([z.string(), z.null()]).optional(),
  project_id: z.union([z.string(), z.null()]).optional(),
  azure_openai_deployment_name: z.union([z.string(), z.null()]).optional(),
  azure_openai_endpoint: z.union([z.string(), z.null()]).optional(),
  azure_openai_api_version: z.union([z.string(), z.null()]).optional(),
  azure_openai_key: z.union([z.string(), z.null()]).optional(),
  input_url: z.union([z.string(), z.null()]).optional(),
  http_proxy: z.union([z.string(), z.null()]).optional(),
  auto_mode: z.union([z.boolean(), z.null()]).optional(),
  auto_mode_trigger_on_regexp_in_page: z
    .union([z.string(), z.null()])
    .optional(),
  auto_mode_trigger_on_text_in_page: z.union([z.string(), z.null()]).optional(),
  auto_mode_trigger_on_table_in_page: z
    .union([z.boolean(), z.null()])
    .optional(),
  auto_mode_trigger_on_image_in_page: z
    .union([z.boolean(), z.null()])
    .optional(),
  auto_mode_configuration_json: z.union([z.string(), z.null()]).optional(),
  structured_output: z.union([z.boolean(), z.null()]).optional(),
  structured_output_json_schema: z.union([z.string(), z.null()]).optional(),
  structured_output_json_schema_name: z
    .union([z.string(), z.null()])
    .optional(),
  max_pages: z.union([z.number().int(), z.null()]).optional(),
  max_pages_enforced: z.union([z.number().int(), z.null()]).optional(),
  extract_charts: z.union([z.boolean(), z.null()]).optional(),
  formatting_instruction: z.union([z.string(), z.null()]).optional(),
  complemental_formatting_instruction: z
    .union([z.string(), z.null()])
    .optional(),
  content_guideline_instruction: z.union([z.string(), z.null()]).optional(),
  spreadsheet_extract_sub_tables: z.union([z.boolean(), z.null()]).optional(),
  job_timeout_in_seconds: z.union([z.number(), z.null()]).optional(),
  job_timeout_extra_time_per_page_in_seconds: z
    .union([z.number(), z.null()])
    .optional(),
  strict_mode_image_extraction: z.union([z.boolean(), z.null()]).optional(),
  strict_mode_image_ocr: z.union([z.boolean(), z.null()]).optional(),
  strict_mode_reconstruction: z.union([z.boolean(), z.null()]).optional(),
  strict_mode_buggy_font: z.union([z.boolean(), z.null()]).optional(),
  save_images: z.union([z.boolean(), z.null()]).optional(),
  hide_headers: z.union([z.boolean(), z.null()]).optional(),
  hide_footers: z.union([z.boolean(), z.null()]).optional(),
  page_header_prefix: z.union([z.string(), z.null()]).optional(),
  page_header_suffix: z.union([z.string(), z.null()]).optional(),
  page_footer_prefix: z.union([z.string(), z.null()]).optional(),
  page_footer_suffix: z.union([z.string(), z.null()]).optional(),
  ignore_document_elements_for_layout_detection: z
    .union([z.boolean(), z.null()])
    .optional(),
  output_tables_as_HTML: z.union([z.boolean(), z.null()]).optional(),
  internal_is_screenshot_job: z.union([z.boolean(), z.null()]).optional(),
  parse_mode: z.union([zParsingMode, z.null()]).optional(),
  system_prompt: z.union([z.string(), z.null()]).optional(),
  system_prompt_append: z.union([z.string(), z.null()]).optional(),
  user_prompt: z.union([z.string(), z.null()]).optional(),
  page_error_tolerance: z.union([z.number(), z.null()]).optional(),
  replace_failed_page_mode: z.union([zFailPageMode, z.null()]).optional(),
  replace_failed_page_with_error_message_prefix: z
    .union([z.string(), z.null()])
    .optional(),
  replace_failed_page_with_error_message_suffix: z
    .union([z.string(), z.null()])
    .optional(),
  markdown_table_multiline_header_separator: z
    .union([z.string(), z.null()])
    .optional(),
  type: z.literal("parse").optional().default("parse"),
  file_name: z.string(),
  original_file_name: z.string(),
  file_key: z.string(),
  lang: z.string(),
  outputBucket: z.union([z.string(), z.null()]).optional(),
  file_id: z.union([z.string(), z.null()]).optional(),
  pipeline_id: z.union([z.string(), z.null()]).optional(),
});

export const zLegacyParseJobConfig = z.object({
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  resource_info: z.union([z.object({}), z.null()]).optional(),
  type: z.literal("legacy_parse").optional().default("legacy_parse"),
  userId: z.string(),
  fileName: z.string(),
  originalFileName: z.string(),
  fileKey: z.string(),
  inputUrl: z.union([z.string(), z.null()]).optional(),
  httpProxy: z.union([z.string(), z.null()]).optional(),
  fastMode: z.union([z.boolean(), z.null()]).optional(),
  lang: z.string(),
  template: z.string().optional().default(""),
  pipelineId: z.union([z.string(), z.null()]).optional(),
  outputBucket: z.union([z.string(), z.null()]).optional(),
  fileId: z.union([z.string(), z.null()]).optional(),
  fullFilePath: z.union([z.string(), z.null()]).optional(),
  fromLLamaCloud: z.boolean().optional().default(false),
  skipDiagonalText: z.boolean().optional().default(false),
  preserveLayoutAlignmentAcrossPages: z.boolean().optional().default(false),
  invalidateCache: z.boolean(),
  outputPDFOfDocument: z.union([z.boolean(), z.null()]).optional(),
  outlinedTableExtraction: z.union([z.boolean(), z.null()]).optional(),
  mergeTablesAcrossPagesInMarkdown: z.union([z.boolean(), z.null()]).optional(),
  saveImages: z.union([z.boolean(), z.null()]).optional(),
  gpt4o: z.boolean().optional().default(false),
  openAIAPIKey: z.string(),
  doNotUnrollColumns: z.boolean().optional().default(false),
  spreadSheetExtractSubTables: z.union([z.boolean(), z.null()]).optional(),
  extractLayout: z.union([z.boolean(), z.null()]).optional(),
  highResOcr: z.union([z.boolean(), z.null()]).optional(),
  htmlMakeAllElementsVisible: z.union([z.boolean(), z.null()]).optional(),
  htmlRemoveFixedElements: z.union([z.boolean(), z.null()]).optional(),
  htmlRemoveNavigationElements: z.union([z.boolean(), z.null()]).optional(),
  guessXLSXSheetName: z.boolean().optional().default(false),
  doNotCache: z.boolean().optional().default(false),
  pageSeparator: z.union([z.string(), z.null()]).optional(),
  boundingBox: z.union([z.string(), z.null()]).optional(),
  bboxTop: z.union([z.number(), z.null()]).optional(),
  bboxRight: z.union([z.number(), z.null()]).optional(),
  bboxBottom: z.union([z.number(), z.null()]).optional(),
  bboxLeft: z.union([z.number(), z.null()]).optional(),
  disableReconstruction: z.union([z.boolean(), z.null()]).optional(),
  targetPages: z.union([z.string(), z.null()]).optional(),
  multimodalPipeline: z.union([z.boolean(), z.null()]).optional(),
  multimodalModel: z.union([z.string(), z.null()]).optional(),
  model: z.union([z.string(), z.null()]).optional(),
  vendorAPIKey: z.union([z.string(), z.null()]).optional(),
  pagePrefix: z.union([z.string(), z.null()]).optional(),
  pageSuffix: z.union([z.string(), z.null()]).optional(),
  webhookUrl: z.union([z.string(), z.null()]).optional(),
  preset: z.union([z.string(), z.null()]).optional(),
  takeScreenshot: z.boolean().optional().default(false),
  isFormattingInstruction: z.boolean().optional().default(true),
  premiumMode: z.boolean().optional().default(false),
  continuousMode: z.boolean().optional().default(false),
  disableOcr: z.boolean().optional().default(false),
  disableImageExtraction: z.boolean().optional().default(false),
  annotateLinks: z.boolean().optional().default(false),
  adaptiveLongTable: z.boolean().optional().default(false),
  compactMarkdownTable: z.boolean().optional().default(false),
  inputS3Path: z.union([z.string(), z.null()]).optional(),
  inputS3Region: z.union([z.string(), z.null()]).optional(),
  outputS3PathPrefix: z.union([z.string(), z.null()]).optional(),
  outputS3Region: z.union([z.string(), z.null()]).optional(),
  projectId: z.union([z.string(), z.null()]).optional(),
  azureOpenAiDeploymentName: z.union([z.string(), z.null()]).optional(),
  azureOpenAiEndpoint: z.union([z.string(), z.null()]).optional(),
  azureOpenAiApiVersion: z.union([z.string(), z.null()]).optional(),
  azureOpenAiKey: z.union([z.string(), z.null()]).optional(),
  autoMode: z.boolean().optional().default(false),
  autoModeTriggerOnTableInPage: z.boolean().optional().default(false),
  autoModeTriggerOnImageInPage: z.boolean().optional().default(false),
  autoModeTriggerOnRegexpInPage: z.union([z.string(), z.null()]).optional(),
  autoModeTriggerOnTextInPage: z.union([z.string(), z.null()]).optional(),
  autoModeConfigurationJSON: z.union([z.string(), z.null()]).optional(),
  structuredOutput: z.boolean().optional().default(false),
  structuredOutputJSONSchema: z.union([z.string(), z.null()]).optional(),
  structuredOutputJSONSchemaName: z.union([z.string(), z.null()]).optional(),
  maxPages: z.union([z.number().int(), z.null()]).optional(),
  extractCharts: z.boolean().optional().default(false),
  formattingInstruction: z.union([z.string(), z.null()]).optional(),
  complementalFormattingInstruction: z.union([z.string(), z.null()]).optional(),
  contentGuidelineInstruction: z.union([z.string(), z.null()]).optional(),
  jobTimeoutInSeconds: z.union([z.number(), z.null()]).optional(),
  jobTimeoutExtraTimePerPageInSeconds: z
    .union([z.number(), z.null()])
    .optional(),
  strictModeImageExtraction: z.boolean().optional().default(false),
  strictModeImageOCR: z.boolean().optional().default(false),
  strictModeReconstruction: z.boolean().optional().default(false),
  strictModeBuggyFont: z.boolean().optional().default(false),
  ignoreDocumentElementsForLayoutDetection: z
    .boolean()
    .optional()
    .default(false),
  outputTablesAsHTML: z.boolean().optional().default(false),
  parseMode: z.union([z.string(), z.null()]).optional(),
  systemPrompt: z.union([z.string(), z.null()]).optional(),
  systemPromptAppend: z.union([z.string(), z.null()]).optional(),
  userPrompt: z.union([z.string(), z.null()]).optional(),
  pageHeaderPrefix: z.union([z.string(), z.null()]).optional(),
  pageHeaderSuffix: z.union([z.string(), z.null()]).optional(),
  pageFooterPrefix: z.union([z.string(), z.null()]).optional(),
  pageFooterSuffix: z.union([z.string(), z.null()]).optional(),
  hideHeaders: z.boolean().optional().default(false),
  hideFooters: z.boolean().optional().default(false),
});

export const zLoadFilesJobConfig = z.object({
  type: z.literal("load_files").optional().default("load_files"),
  file_ids: z.union([z.array(z.string().uuid()), z.null()]).optional(),
});

export const zLLamaParseTransformConfig = z.object({
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  resource_info: z.union([z.object({}), z.null()]).optional(),
  type: z
    .literal("llama_parse_transform")
    .optional()
    .default("llama_parse_transform"),
  file_output: z.string(),
});

export const zPipelineManagedIngestionJobParams = z.object({
  type: z
    .literal("pipeline_managed_ingestion")
    .optional()
    .default("pipeline_managed_ingestion"),
  should_delete: z.union([z.boolean(), z.null()]).optional(),
  delete_info: z.union([zDeleteParams, z.null()]).optional(),
});

export const zPipelineFileUpdateDispatcherConfig = z.object({
  type: z
    .literal("pipeline_file_update_dispatcher")
    .optional()
    .default("pipeline_file_update_dispatcher"),
  pipeline_file_ids: z.union([z.array(z.string().uuid()), z.null()]).optional(),
  should_delete: z.union([z.boolean(), z.null()]).optional(),
  delete_info: z.union([zDeleteParams, z.null()]).optional(),
});

export const zPipelineFileUpdaterConfig = z.object({
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  resource_info: z.union([z.object({}), z.null()]).optional(),
  type: z
    .literal("pipeline_file_updater")
    .optional()
    .default("pipeline_file_updater"),
  should_delete: z.union([z.boolean(), z.null()]).optional(),
  should_parse: z.union([z.boolean(), z.null()]).optional(),
  delete_info: z.union([zDeleteParams, z.null()]).optional(),
  is_new_file: z.boolean().optional().default(false),
  data_source_project_file_changed: z.boolean().optional().default(false),
});

export const zJobRecord = z.object({
  webhook_configurations: z
    .union([z.array(zWebhookConfiguration), z.null()])
    .optional(),
  job_name: zJobNames,
  partitions: z.object({}),
  parameters: z
    .union([
      z.union([
        z
          .object({
            type: z.literal("parse"),
          })
          .and(zParseJobConfig),
        z
          .object({
            type: z.literal("legacy_parse"),
          })
          .and(zLegacyParseJobConfig),
        z
          .object({
            type: z.literal("load_files"),
          })
          .and(zLoadFilesJobConfig),
        z
          .object({
            type: z.literal("llama_parse_transform"),
          })
          .and(zLLamaParseTransformConfig),
        z
          .object({
            type: z.literal("pipeline_managed_ingestion"),
          })
          .and(zPipelineManagedIngestionJobParams),
        z
          .object({
            type: z.literal("data_source_update_dispatcher"),
          })
          .and(zDataSourceUpdateDispatcherConfig),
        z
          .object({
            type: z.literal("pipeline_file_update_dispatcher"),
          })
          .and(zPipelineFileUpdateDispatcherConfig),
        z
          .object({
            type: z.literal("pipeline_file_updater"),
          })
          .and(zPipelineFileUpdaterConfig),
        z
          .object({
            type: z.literal("document_ingestion"),
          })
          .and(zDocumentIngestionJobParams),
      ]),
      z.null(),
    ])
    .optional(),
  session_id: z.union([z.string().uuid(), z.null()]).optional(),
  correlation_id: z.union([z.string().uuid(), z.null()]).optional(),
  parent_job_execution_id: z.union([z.string().uuid(), z.null()]).optional(),
  user_id: z.union([z.string(), z.null()]).optional(),
  created_at: z.string().datetime(),
  project_id: z.union([z.string().uuid(), z.null()]).optional(),
  id: z.string().uuid().optional(),
  status: zStatusEnum,
  error_code: z.union([z.string(), z.null()]).optional(),
  error_message: z.union([z.string(), z.null()]).optional(),
  attempts: z.union([z.number().int(), z.null()]).optional(),
  started_at: z.union([z.string().datetime(), z.null()]).optional(),
  ended_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.string().datetime().optional(),
});

export const zUsageMetricResponse = z.object({
  feature_usage: z.object({}),
  day: z.string(),
  source: z.string(),
  job_id: z.string(),
});

export const zUserJobRecord = z.object({
  id: z.string(),
  name: z.string(),
});

export const zJobRecordWithUsageMetrics = z.object({
  job_record: zJobRecord,
  usage_metrics: z.union([zUsageMetricResponse, z.null()]).optional(),
  user: zUserJobRecord,
});

export const zLlmModelData = z.object({
  name: z.string(),
  description: z.string(),
  multi_modal: z.boolean(),
  model_name: z.string().optional().default("The name of the model."),
});

export const zLlamaParseSupportedFileExtensions = z.enum([
  ".pdf",
  ".doc",
  ".docx",
  ".docm",
  ".dot",
  ".dotx",
  ".dotm",
  ".rtf",
  ".wps",
  ".wpd",
  ".sxw",
  ".stw",
  ".sxg",
  ".pages",
  ".mw",
  ".mcw",
  ".uot",
  ".uof",
  ".uos",
  ".uop",
  ".ppt",
  ".pptx",
  ".pot",
  ".pptm",
  ".potx",
  ".potm",
  ".key",
  ".odp",
  ".odg",
  ".otp",
  ".fopd",
  ".sxi",
  ".sti",
  ".epub",
  ".jpg",
  ".jpeg",
  ".png",
  ".gif",
  ".bmp",
  ".svg",
  ".tiff",
  ".webp",
  ".html",
  ".htm",
  ".xls",
  ".xlsx",
  ".xlsm",
  ".xlsb",
  ".xlw",
  ".csv",
  ".dif",
  ".sylk",
  ".slk",
  ".prn",
  ".numbers",
  ".et",
  ".ods",
  ".fods",
  ".uos1",
  ".uos2",
  ".dbf",
  ".wk1",
  ".wk2",
  ".wk3",
  ".wk4",
  ".wks",
  ".wq1",
  ".wq2",
  ".wb1",
  ".wb2",
  ".wb3",
  ".qpw",
  ".xlr",
  ".eth",
  ".tsv",
]);

export const zMessageAnnotation = z.object({
  type: z.string(),
  data: z.string(),
  class_name: z.string().optional().default("base_component"),
});

export const zMetronomeDashboardResponse = z.object({
  url: z.string(),
});

export const zMetronomeDashboardType = z.enum(["invoices", "usage"]);

export const zNodeRelationship = z.enum(["1", "2", "3", "4", "5"]);

export const zObjectType = z.enum(["1", "2", "3", "4", "5"]);

export const zParsePlanLevel = z.enum(["DEFAULT", "PREMIUM"]);

export const zOrganization = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string().min(1).max(3000),
  stripe_customer_id: z.union([z.string(), z.null()]).optional(),
  parse_plan_level: zParsePlanLevel.optional(),
});

export const zOrganizationCreate = z.object({
  name: z.string().min(1).max(3000),
});

export const zOrganizationUpdate = z.object({
  name: z.string().min(1).max(3000),
});

export const zPaginatedExtractRunsResponse = z.object({
  items: z.array(zExtractRun),
  total: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
});

export const zPaginatedJobsHistoryWithMetrics = z.object({
  jobs: z.array(zJobRecordWithUsageMetrics),
  total_count: z.number().int(),
  limit: z.number().int(),
  offset: z.number().int(),
});

export const zPaginatedListCloudDocumentsResponse = z.object({
  documents: z.array(zCloudDocument),
  limit: z.number().int(),
  offset: z.number().int(),
  total_count: z.number().int(),
});

export const zPipelineFile = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.union([z.string().min(1).max(3000), z.null()]).optional(),
  external_file_id: z.union([z.string(), z.null()]).optional(),
  file_size: z.union([z.number().int().gte(0), z.null()]).optional(),
  file_type: z.union([z.string().min(1).max(3000), z.null()]).optional(),
  project_id: z.string().uuid(),
  last_modified_at: z.union([z.string().datetime(), z.null()]).optional(),
  resource_info: z.union([z.object({}), z.null()]).optional(),
  permission_info: z.union([z.object({}), z.null()]).optional(),
  data_source_id: z.union([z.string().uuid(), z.null()]).optional(),
  file_id: z.union([z.string().uuid(), z.null()]).optional(),
  pipeline_id: z.string().uuid(),
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  config_hash: z.union([z.object({}), z.null()]).optional(),
  indexed_page_count: z.union([z.number().int(), z.null()]).optional(),
  status: z
    .union([
      z.enum(["NOT_STARTED", "IN_PROGRESS", "SUCCESS", "ERROR", "CANCELLED"]),
      z.null(),
    ])
    .optional(),
  status_updated_at: z.union([z.string().datetime(), z.null()]).optional(),
});

export const zPaginatedListPipelineFilesResponse = z.object({
  files: z.array(zPipelineFile),
  limit: z.number().int(),
  offset: z.number().int(),
  total_count: z.number().int(),
});

export const zReport = z.object({
  id: z.string().uuid(),
  blocks: z.array(zReportBlock).optional(),
});

export const zReportPlan = z.object({
  id: z.string().uuid().optional(),
  blocks: z.array(zReportPlanBlock).optional(),
  generated_at: z.string().datetime().optional(),
});

export const zReportState = z.enum([
  "pending",
  "planning",
  "waiting_approval",
  "generating",
  "completed",
  "error",
]);

export const zReportResponse = z.object({
  name: z.string(),
  report_id: z.string().uuid(),
  report: z.union([zReport, z.null()]),
  plan: z.union([zReportPlan, z.null()]),
  version: z.number().int(),
  last_updated: z.string().datetime(),
  status: zReportState,
  total_versions: z.number().int(),
});

export const zPaginatedReportResponse = z.object({
  report_responses: z.array(zReportResponse),
  limit: z.number().int(),
  offset: z.number().int(),
  total_count: z.number().int(),
});

export const zPaginatedResponseAgentData = z.object({
  items: z.array(zAgentData),
  next_page_token: z.union([z.string(), z.null()]).optional(),
  total_size: z.union([z.number().int(), z.null()]).optional(),
});

export const zPaginatedResponseAggregateGroup = z.object({
  items: z.array(zAggregateGroup),
  next_page_token: z.union([z.string(), z.null()]).optional(),
  total_size: z.union([z.number().int(), z.null()]).optional(),
});

export const zParsingHistoryItem = z.object({
  user_id: z.string(),
  day: z.string(),
  job_id: z.string(),
  file_name: z.string(),
  original_file_name: z.string(),
  expired: z.boolean().optional().default(false),
  pages: z.union([z.number(), z.null()]).optional(),
  images: z.union([z.number(), z.null()]).optional(),
  time: z.union([z.number(), z.null()]).optional(),
});

export const zParsingJob = z.object({
  id: z.string().uuid(),
  status: zStatusEnum,
  error_code: z.union([z.string(), z.null()]).optional(),
  error_message: z.union([z.string(), z.null()]).optional(),
});

export const zParsingJobJsonResult = z.object({
  pages: z.unknown(),
  job_metadata: z.unknown(),
});

export const zParsingJobMarkdownResult = z.object({
  markdown: z.string(),
  job_metadata: z.unknown(),
});

export const zParsingJobStructuredResult = z.object({
  structured: z.unknown(),
  job_metadata: z.unknown(),
});

export const zParsingJobTextResult = z.object({
  text: z.string(),
  job_metadata: z.unknown(),
});

export const zPartitionNames = z.enum([
  "data_source_id_partition",
  "pipeline_id_partition",
  "eval_dataset_id_partition",
  "file_id_partition",
  "pipeline_file_id_partition",
  "file_parsing_id_partition",
  "extraction_schema_id_partition",
]);

export const zPermission = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string().min(1).max(3000),
  description: z.union([z.string(), z.null()]),
  access: z.boolean(),
});

export const zPipelineType = z.enum(["PLAYGROUND", "MANAGED"]);

export const zPipelineConfigurationHashes = z.object({
  embedding_config_hash: z.union([z.string(), z.null()]).optional(),
  parsing_config_hash: z.union([z.string(), z.null()]).optional(),
  transform_config_hash: z.union([z.string(), z.null()]).optional(),
});

export const zPipelineMetadataConfig = z.object({
  excluded_embed_metadata_keys: z.array(z.string()).optional(),
  excluded_llm_metadata_keys: z.array(z.string()).optional(),
});

export const zPipeline = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string(),
  project_id: z.string().uuid(),
  embedding_model_config_id: z.union([z.string().uuid(), z.null()]).optional(),
  pipeline_type: zPipelineType.optional(),
  managed_pipeline_id: z.union([z.string().uuid(), z.null()]).optional(),
  embedding_config: z.union([
    z
      .object({
        type: z.literal("AZURE_EMBEDDING"),
      })
      .and(zAzureOpenAiEmbeddingConfig),
    z
      .object({
        type: z.literal("COHERE_EMBEDDING"),
      })
      .and(zCohereEmbeddingConfig),
    z
      .object({
        type: z.literal("GEMINI_EMBEDDING"),
      })
      .and(zGeminiEmbeddingConfig),
    z
      .object({
        type: z.literal("HUGGINGFACE_API_EMBEDDING"),
      })
      .and(zHuggingFaceInferenceApiEmbeddingConfig),
    z
      .object({
        type: z.literal("OPENAI_EMBEDDING"),
      })
      .and(zOpenAiEmbeddingConfig),
    z
      .object({
        type: z.literal("VERTEXAI_EMBEDDING"),
      })
      .and(zVertexAiEmbeddingConfig),
    z
      .object({
        type: z.literal("BEDROCK_EMBEDDING"),
      })
      .and(zBedrockEmbeddingConfig),
  ]),
  config_hash: z.union([zPipelineConfigurationHashes, z.null()]).optional(),
  transform_config: z
    .union([zAutoTransformConfig, zAdvancedModeTransformConfig])
    .optional(),
  preset_retrieval_parameters: zPresetRetrievalParams.optional(),
  eval_parameters: zEvalExecutionParams.optional(),
  llama_parse_parameters: z.union([zLlamaParseParameters, z.null()]).optional(),
  data_sink: z.union([zDataSink, z.null()]).optional(),
  status: z.union([z.enum(["CREATED", "DELETING"]), z.null()]).optional(),
  metadata_config: z.union([zPipelineMetadataConfig, z.null()]).optional(),
});

export const zPipelineCreate = z.object({
  embedding_config: z
    .union([
      z.union([
        z
          .object({
            type: z.literal("AZURE_EMBEDDING"),
          })
          .and(zAzureOpenAiEmbeddingConfig),
        z
          .object({
            type: z.literal("COHERE_EMBEDDING"),
          })
          .and(zCohereEmbeddingConfig),
        z
          .object({
            type: z.literal("GEMINI_EMBEDDING"),
          })
          .and(zGeminiEmbeddingConfig),
        z
          .object({
            type: z.literal("HUGGINGFACE_API_EMBEDDING"),
          })
          .and(zHuggingFaceInferenceApiEmbeddingConfig),
        z
          .object({
            type: z.literal("OPENAI_EMBEDDING"),
          })
          .and(zOpenAiEmbeddingConfig),
        z
          .object({
            type: z.literal("VERTEXAI_EMBEDDING"),
          })
          .and(zVertexAiEmbeddingConfig),
        z
          .object({
            type: z.literal("BEDROCK_EMBEDDING"),
          })
          .and(zBedrockEmbeddingConfig),
      ]),
      z.null(),
    ])
    .optional(),
  transform_config: z
    .union([zAutoTransformConfig, zAdvancedModeTransformConfig, z.null()])
    .optional(),
  data_sink_id: z.union([z.string().uuid(), z.null()]).optional(),
  embedding_model_config_id: z.union([z.string().uuid(), z.null()]).optional(),
  data_sink: z.union([zDataSinkCreate, z.null()]).optional(),
  preset_retrieval_parameters: zPresetRetrievalParams.optional(),
  eval_parameters: zEvalExecutionParams.optional(),
  llama_parse_parameters: zLlamaParseParameters.optional(),
  status: z.union([z.string(), z.null()]).optional(),
  metadata_config: z.union([zPipelineMetadataConfig, z.null()]).optional(),
  name: z.string().min(1).max(3000),
  pipeline_type: zPipelineType.optional(),
  managed_pipeline_id: z.union([z.string().uuid(), z.null()]).optional(),
});

export const zPipelineDataSource = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string(),
  source_type: zConfigurableDataSourceNames,
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
  component: z.union([
    z.object({}),
    zCloudS3DataSource,
    zCloudAzStorageBlobDataSource,
    zCloudOneDriveDataSource,
    zCloudSharepointDataSource,
    zCloudSlackDataSource,
    zCloudNotionPageDataSource,
    zCloudConfluenceDataSource,
    zCloudJiraDataSource,
    zCloudBoxDataSource,
  ]),
  version_metadata: z
    .union([zDataSourceReaderVersionMetadata, z.null()])
    .optional(),
  project_id: z.string().uuid(),
  data_source_id: z.string().uuid(),
  pipeline_id: z.string().uuid(),
  last_synced_at: z.string().datetime(),
  sync_interval: z.union([z.number(), z.null()]).optional(),
  sync_schedule_set_by: z.union([z.string(), z.null()]).optional(),
  status: z
    .union([
      z.enum(["NOT_STARTED", "IN_PROGRESS", "SUCCESS", "ERROR", "CANCELLED"]),
      z.null(),
    ])
    .optional(),
  status_updated_at: z.union([z.string().datetime(), z.null()]).optional(),
});

export const zPipelineDataSourceCreate = z.object({
  data_source_id: z.string().uuid(),
  sync_interval: z.union([z.number(), z.null()]).optional(),
});

export const zPipelineDataSourceUpdate = z.object({
  sync_interval: z.union([z.number(), z.null()]).optional(),
});

export const zPipelineDeployment = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  status: zManagedIngestionStatus,
  started_at: z.union([z.string().datetime(), z.null()]).optional(),
  ended_at: z.union([z.string().datetime(), z.null()]).optional(),
});

export const zPipelineFileCreate = z.object({
  file_id: z.string().uuid(),
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
});

export const zPipelineFileUpdate = z.object({
  custom_metadata: z.union([z.object({}), z.null()]).optional(),
});

export const zPipelineUpdate = z.object({
  embedding_config: z
    .union([
      z.union([
        z
          .object({
            type: z.literal("AZURE_EMBEDDING"),
          })
          .and(zAzureOpenAiEmbeddingConfig),
        z
          .object({
            type: z.literal("COHERE_EMBEDDING"),
          })
          .and(zCohereEmbeddingConfig),
        z
          .object({
            type: z.literal("GEMINI_EMBEDDING"),
          })
          .and(zGeminiEmbeddingConfig),
        z
          .object({
            type: z.literal("HUGGINGFACE_API_EMBEDDING"),
          })
          .and(zHuggingFaceInferenceApiEmbeddingConfig),
        z
          .object({
            type: z.literal("OPENAI_EMBEDDING"),
          })
          .and(zOpenAiEmbeddingConfig),
        z
          .object({
            type: z.literal("VERTEXAI_EMBEDDING"),
          })
          .and(zVertexAiEmbeddingConfig),
        z
          .object({
            type: z.literal("BEDROCK_EMBEDDING"),
          })
          .and(zBedrockEmbeddingConfig),
      ]),
      z.null(),
    ])
    .optional(),
  transform_config: z
    .union([zAutoTransformConfig, zAdvancedModeTransformConfig, z.null()])
    .optional(),
  data_sink_id: z.union([z.string().uuid(), z.null()]).optional(),
  embedding_model_config_id: z.union([z.string().uuid(), z.null()]).optional(),
  data_sink: z.union([zDataSinkCreate, z.null()]).optional(),
  preset_retrieval_parameters: z
    .union([zPresetRetrievalParams, z.null()])
    .optional(),
  eval_parameters: z.union([zEvalExecutionParams, z.null()]).optional(),
  llama_parse_parameters: z.union([zLlamaParseParameters, z.null()]).optional(),
  status: z.union([z.string(), z.null()]).optional(),
  metadata_config: z.union([zPipelineMetadataConfig, z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  managed_pipeline_id: z.union([z.string().uuid(), z.null()]).optional(),
});

export const zSrcAppSchemaChatChatMessage = z.object({
  id: z.string().uuid(),
  index: z.number().int(),
  annotations: z.array(zMessageAnnotation).optional(),
  role: zMessageRole,
  content: z.union([z.string(), z.null()]).optional(),
  additional_kwargs: z.object({}).optional(),
  class_name: z.string().optional().default("base_component"),
});

export const zPlaygroundSession = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  pipeline_id: z.string().uuid(),
  user_id: z.string(),
  llm_params_id: z.string().uuid(),
  llm_params: zLlmParameters.optional(),
  retrieval_params_id: z.string().uuid(),
  retrieval_params: zPresetRetrievalParams.optional(),
  chat_messages: z.array(zSrcAppSchemaChatChatMessage).optional(),
});

export const zPresignedUrl = z.object({
  url: z.string().url().min(1),
  expires_at: z.string().datetime(),
  form_fields: z.union([z.object({}), z.null()]).optional(),
});

export const zReportEventType = z.enum([
  "load_template",
  "extract_plan",
  "summarize",
  "file_processing",
  "generate_block",
  "editing",
]);

export const zProgressEvent = z.object({
  timestamp: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  group_id: z.string().uuid().optional(),
  type: z.literal("progress").optional().default("progress"),
  variant: zReportEventType,
  msg: z.string(),
  progress: z.union([z.number().gte(0).lte(1), z.null()]).optional(),
  status: z.enum(["pending", "in_progress", "completed", "error"]).optional(),
  extra_detail: z.union([z.object({}), z.null()]).optional(),
});

export const zProject = z.object({
  name: z.string().min(1).max(3000),
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  ad_hoc_eval_dataset_id: z.union([z.string().uuid(), z.null()]).optional(),
  organization_id: z.string().uuid(),
  is_default: z.boolean().optional().default(false),
});

export const zProjectCreate = z.object({
  name: z.string().min(1).max(3000),
});

export const zProjectUpdate = z.object({
  name: z.string().min(1).max(3000),
});

export const zPromptConf = z.object({
  system_prompt: z
    .string()
    .optional()
    .default(
      "Given a JSON schema, extract the data from the provided SOURCE TEXT according to the schema. Only output information that is explicitly stated or can be inferred from the SOURCE TEXT.",
    ),
  extraction_prompt: z
    .string()
    .optional()
    .default("The extracted data using the given JSON schema."),
  error_handling_prompt: z
    .string()
    .optional()
    .default(
      "If the source text does not contain enough information to extract the value, explain the reason very briefly. Else, output null and fill out the value__ field.",
    ),
  reasoning_prompt: z.string().optional().default(`
Provide a brief explanation for how you arrived at the extracted value based on the source text provided.
- For inferred values, explain the reasoning behind the extraction briefly.
- For simple verbatim extraction, output 'VERBATIM EXTRACTION'. 
- When supporting data is not present in the source text, output 'INSUFFICIENT DATA' and emit blank or null values for the value__ field.
`),
  cite_sources_prompt: z
    .object({})
    .optional()
    .default({
      description: `
### Citation Rules (read carefully):
- You must ANNOTATE every value with a short EXACT substring from the source text that supports it.
- For inferred values, cite the text used to infer it or output 'INFERRED FROM TEXT'
- If no support exists, output 'INSUFFICIENT DATA' and leave value__ null or '', 0.0, False etc depending on the type of the field.
`,
      page: "Cite the page number of the source text that the extracted value is from. The page number is the integer that appears right after <<<PAGE:. If no page number is present in this format, use the default value of 1.",
      matching_text:
        'Cite the **EXACT TEXT from the SOURCE TEXT** that supports the extracted value within 120 characters. If the exact substring is >120 chars, truncate with ellipsis "...".',
    }),
  scratchpad_prompt: z
    .string()
    .optional()
    .default("Use for intermediate step-by-step reasoning. Be concise."),
});

export const zRelatedNodeInfo = z.object({
  node_id: z.string(),
  node_type: z.union([zObjectType, z.string(), z.null()]).optional(),
  metadata: z.object({}).optional(),
  hash: z.union([z.string(), z.null()]).optional(),
  class_name: z.string().optional().default("RelatedNodeInfo"),
});

export const zReportCreateResponse = z.object({
  id: z.string().uuid(),
});

export const zReportUpdateEvent = z.object({
  timestamp: z.string().datetime().optional(),
  type: z
    .literal("report_block_update")
    .optional()
    .default("report_block_update"),
  msg: z
    .string()
    .optional()
    .default("A block has been generated and is ready to be displayed"),
  block: zReportBlock,
});

export const zReportStateEvent = z.object({
  timestamp: z.string().datetime().optional(),
  type: z.literal("report_state_update"),
  msg: z.string(),
  status: zReportState,
});

export const zReportEventItem = z.object({
  id: z.string().uuid(),
  report_id: z.string().uuid(),
  event_type: z.string(),
  event_data: z.union([zProgressEvent, zReportUpdateEvent, zReportStateEvent]),
  timestamp: z.string().datetime(),
});

export const zReportMetadata = z.object({
  id: z.string().uuid(),
  name: z.string(),
  report_metadata: z.object({}),
  state: zReportState,
  input_files: z.union([z.array(z.string()), z.null()]).optional(),
  template_file: z.union([z.string(), z.null()]).optional(),
  template_text: z.union([z.string(), z.null()]).optional(),
  template_instructions: z.union([z.string(), z.null()]).optional(),
});

export const zReportNameUpdate = z.object({
  name: z.string(),
});

export const zReportVersionPatch = z.object({
  content: zReport,
});

export const zRetrievalParams = z.object({
  dense_similarity_top_k: z
    .union([z.number().int().gte(1).lte(100), z.null()])
    .optional(),
  dense_similarity_cutoff: z
    .union([z.number().gte(0).lte(1), z.null()])
    .optional(),
  sparse_similarity_top_k: z
    .union([z.number().int().gte(1).lte(100), z.null()])
    .optional(),
  enable_reranking: z.union([z.boolean(), z.null()]).optional(),
  rerank_top_n: z
    .union([z.number().int().gte(1).lte(100), z.null()])
    .optional(),
  alpha: z.union([z.number().gte(0).lte(1), z.null()]).optional(),
  search_filters: z.union([zMetadataFilters, z.null()]).optional(),
  search_filters_inference_schema: z.union([z.object({}), z.null()]).optional(),
  files_top_k: z.union([z.number().int().gte(1).lte(5), z.null()]).optional(),
  retrieval_mode: zRetrievalMode.optional(),
  retrieve_image_nodes: z.boolean().optional().default(false),
  retrieve_page_screenshot_nodes: z.boolean().optional().default(false),
  retrieve_page_figure_nodes: z.boolean().optional().default(false),
  query: z.string().min(1),
  class_name: z.string().optional().default("base_component"),
});

export const zRetrieveResults = z.object({
  pipeline_id: z.string().uuid(),
  retrieval_nodes: z.array(zTextNodeWithScore),
  image_nodes: z.array(zPageScreenshotNodeWithScore).optional(),
  page_figure_nodes: z.array(zPageFigureNodeWithScore).optional(),
  retrieval_latency: z.object({}).optional(),
  metadata: z.object({}).optional(),
  inferred_search_filters: z.union([zMetadataFilters, z.null()]).optional(),
  class_name: z.string().optional().default("RetrieveResults"),
});

export const zRetriever = z.object({
  name: z.string().min(1).max(3000),
  pipelines: z.array(zRetrieverPipeline).optional(),
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  project_id: z.string().uuid(),
});

export const zRetrieverCreate = z.object({
  name: z.string().min(1).max(3000),
  pipelines: z.array(zRetrieverPipeline).optional(),
});

export const zRetrieverUpdate = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  pipelines: z.union([z.array(zRetrieverPipeline), z.null()]),
});

export const zRole = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  name: z.string().min(1).max(3000),
  permissions: z.array(zPermission),
});

export const zSchemaRelaxMode = z.enum(["FULL", "TOP_LEVEL", "LEAF"]);

export const zSearchRequest = z.object({
  page_size: z.union([z.number().int(), z.null()]).optional(),
  page_token: z.union([z.string(), z.null()]).optional(),
  filter: z.union([z.object({}), z.null()]).optional(),
  order_by: z.union([z.string(), z.null()]).optional(),
  agent_slug: z.string(),
  collection: z.string().optional().default("default"),
  include_total: z.boolean().optional().default(false),
  offset: z.union([z.number().int().gte(0), z.null()]).optional(),
});

export const zStructMode = z.enum([
  "STRUCT_PARSE",
  "JSON_MODE",
  "FUNC_CALL",
  "STRUCT_RELAXED",
  "UNSTRUCTURED",
]);

export const zStructParseConf = z.object({
  model: zExtractModels.optional(),
  temperature: z.number().optional().default(0),
  relaxation_mode: zSchemaRelaxMode.optional(),
  struct_mode: zStructMode.optional(),
  handle_missing: z.boolean().optional().default(false),
  use_reasoning: z.boolean().optional().default(false),
  cite_sources: z.boolean().optional().default(false),
  prompt_conf: zPromptConf.optional(),
});

export const zSupportedLlmModel = z.object({
  name: z.string(),
  enabled: z.boolean().optional().default(true),
  details: zLlmModelData,
});

export const zUsageResponse = z.object({
  active_free_credits_usage: z.array(zFreeCreditsUsage).optional().default([]),
  total_users: z.number().int().optional().default(0),
  total_indexes: z.number().int().optional().default(0),
  total_indexed_pages: z.number().int().optional().default(0),
  active_alerts: z
    .array(
      z.enum([
        "plan_spend_limit_exceeded",
        "plan_spend_limit_soft_alert",
        "configured_spend_limit_exceeded",
        "free_credits_exhausted",
      ]),
    )
    .optional()
    .default([]),
  current_invoice_total_usd_cents: z
    .union([z.number().int(), z.null()])
    .optional(),
  total_extraction_agents: z.number().int().optional().default(0),
});

export const zUsageAndPlan = z.object({
  plan: zBasePlan,
  usage: zUsageResponse,
});

export const zUserOrganizationRole = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  user_id: z.string(),
  organization_id: z.string().uuid(),
  project_ids: z.union([z.array(z.string().uuid()), z.null()]).optional(),
  role: zRole,
});

export const zUserOrganization = z.object({
  id: z.string().uuid(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  email: z.union([z.string().email(), z.null()]).optional(),
  user_id: z.union([z.string(), z.null()]).optional(),
  organization_id: z.string().uuid(),
  pending: z.boolean().optional().default(true),
  invited_by_user_id: z.union([z.string(), z.null()]).optional(),
  invited_by_user_email: z.union([z.string().email(), z.null()]).optional(),
  roles: z.array(zUserOrganizationRole),
});

export const zUserOrganizationCreate = z.object({
  user_id: z.union([z.string(), z.null()]).optional(),
  email: z.union([z.string().email(), z.null()]).optional(),
  project_ids: z.union([z.array(z.string().uuid()), z.null()]),
  role_id: z.union([z.string().uuid(), z.null()]).optional(),
});

export const zUserOrganizationDelete = z.object({
  user_id: z.union([z.string(), z.null()]).optional(),
  email: z.union([z.string().email(), z.null()]).optional(),
  project_id_list: z.union([z.array(z.string().uuid()), z.null()]).optional(),
});

export const zUserOrganizationRoleCreate = z.object({
  user_id: z.string(),
  organization_id: z.string().uuid(),
  role_id: z.string().uuid(),
});

export const zListKeysApiV1ApiKeysGetResponse = z.array(zApiKey);

export const zGenerateKeyApiV1ApiKeysPostResponse = zApiKey;

export const zDeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponse = z.void();

export const zUpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponse = zApiKey;

export const zValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponse =
  zBaseConnectionValidation;

export const zValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponse =
  zBaseConnectionValidation;

export const zValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponse =
  zBaseConnectionValidation;

export const zListDataSinksApiV1DataSinksGetResponse = z.array(zDataSink);

export const zCreateDataSinkApiV1DataSinksPostResponse = zDataSink;

export const zUpsertDataSinkApiV1DataSinksPutResponse = zDataSink;

export const zDeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponse = z.void();

export const zGetDataSinkApiV1DataSinksDataSinkIdGetResponse = zDataSink;

export const zUpdateDataSinkApiV1DataSinksDataSinkIdPutResponse = zDataSink;

export const zListDataSourcesApiV1DataSourcesGetResponse = z.array(zDataSource);

export const zCreateDataSourceApiV1DataSourcesPostResponse = zDataSource;

export const zUpsertDataSourceApiV1DataSourcesPutResponse = zDataSource;

export const zDeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponse =
  z.void();

export const zGetDataSourceApiV1DataSourcesDataSourceIdGetResponse =
  zDataSource;

export const zUpdateDataSourceApiV1DataSourcesDataSourceIdPutResponse =
  zDataSource;

export const zListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponse =
  z.array(zEmbeddingModelConfig);

export const zCreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponse =
  zEmbeddingModelConfig;

export const zUpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponse =
  zEmbeddingModelConfig;

export const zDeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponse =
  z.void();

export const zUpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponse =
  zEmbeddingModelConfig;

export const zListOrganizationsApiV1OrganizationsGetResponse =
  z.array(zOrganization);

export const zCreateOrganizationApiV1OrganizationsPostResponse = zOrganization;

export const zUpsertOrganizationApiV1OrganizationsPutResponse = zOrganization;

export const zGetDefaultOrganizationApiV1OrganizationsDefaultGetResponse =
  zOrganization;

export const zSetDefaultOrganizationApiV1OrganizationsDefaultPutResponse =
  zOrganization;

export const zDeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponse =
  z.void();

export const zGetOrganizationApiV1OrganizationsOrganizationIdGetResponse =
  zOrganization;

export const zUpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse =
  zOrganization;

export const zGetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponse =
  zUsageAndPlan;

export const zListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponse =
  z.array(zUserOrganization);

export const zAddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponse =
  z.array(zUserOrganization);

export const zRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponse =
  z.void();

export const zBatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponse =
  z.void();

export const zListRolesApiV1OrganizationsOrganizationIdRolesGetResponse =
  z.array(zRole);

export const zGetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponse =
  z.union([zUserOrganizationRole, z.null()]);

export const zAssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponse =
  zUserOrganizationRole;

export const zListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponse =
  z.array(zProject);

export const zListProjectsApiV1ProjectsGetResponse = z.array(zProject);

export const zCreateProjectApiV1ProjectsPostResponse = zProject;

export const zUpsertProjectApiV1ProjectsPutResponse = zProject;

export const zDeleteProjectApiV1ProjectsProjectIdDeleteResponse = z.void();

export const zGetProjectApiV1ProjectsProjectIdGetResponse = zProject;

export const zUpdateExistingProjectApiV1ProjectsProjectIdPutResponse = zProject;

export const zGetCurrentProjectApiV1ProjectsCurrentGetResponse = zProject;

export const zGetProjectUsageApiV1ProjectsProjectIdUsageGetResponse =
  zUsageAndPlan;

export const zDeleteFileApiV1FilesIdDeleteResponse = z.void();

export const zGetFileApiV1FilesIdGetResponse = zFile;

export const zListFilesApiV1FilesGetResponse = z.array(zFile);

export const zUploadFileApiV1FilesPostResponse = zFile;

export const zGeneratePresignedUrlApiV1FilesPutResponse = zFileIdPresignedUrl;

export const zSyncFilesApiV1FilesSyncPutResponse = z.array(zFile);

export const zUploadFileFromUrlApiV1FilesUploadFromUrlPutResponse = zFile;

export const zReadFileContentApiV1FilesIdContentGetResponse = zPresignedUrl;

export const zListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponse =
  z.array(zPageScreenshotMetadata);

export const zListFilePagesFiguresApiV1FilesIdPageFiguresGetResponse =
  z.array(zPageFigureMetadata);

export const zListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponse =
  z.array(zPageFigureMetadata);

export const zSearchPipelinesApiV1PipelinesGetResponse = z.array(zPipeline);

export const zCreatePipelineApiV1PipelinesPostResponse = zPipeline;

export const zUpsertPipelineApiV1PipelinesPutResponse = zPipeline;

export const zDeletePipelineApiV1PipelinesPipelineIdDeleteResponse = z.void();

export const zGetPipelineApiV1PipelinesPipelineIdGetResponse = zPipeline;

export const zUpdateExistingPipelineApiV1PipelinesPipelineIdPutResponse =
  zPipeline;

export const zGetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponse =
  zManagedIngestionStatusResponse;

export const zSyncPipelineApiV1PipelinesPipelineIdSyncPostResponse = zPipeline;

export const zCancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponse =
  zPipeline;

export const zForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponse =
  z.void();

export const zCopyPipelineApiV1PipelinesPipelineIdCopyPostResponse = zPipeline;

export const zListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponse =
  z.array(zPipelineFile);

export const zAddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponse =
  z.array(zPipelineFile);

export const zListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponse =
  zPaginatedListPipelineFilesResponse;

export const zGetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponse =
  zFileCountByStatusResponse;

export const zGetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponse =
  zManagedIngestionStatusResponse;

export const zDeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponse =
  z.void();

export const zUpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponse =
  zPipelineFile;

export const zDeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponse =
  z.void();

export const zImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponse =
  z.object({});

export const zListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponse =
  z.array(zPipelineDataSource);

export const zAddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponse =
  z.array(zPipelineDataSource);

export const zDeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponse =
  z.void();

export const zUpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponse =
  zPipelineDataSource;

export const zSyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponse =
  zPipeline;

export const zGetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponse =
  zManagedIngestionStatusResponse;

export const zRunSearchApiV1PipelinesPipelineIdRetrievePostResponse =
  zRetrieveResults;

export const zListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponse =
  z.array(zPipelineDeployment);

export const zGetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponse =
  zPipelineDeployment;

export const zGetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponse =
  zPlaygroundSession;

export const zListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponse =
  z.array(zCloudDocument);

export const zCreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponse =
  z.array(zCloudDocument);

export const zUpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponse =
  z.array(zCloudDocument);

export const zPaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponse =
  zPaginatedListCloudDocumentsResponse;

export const zDeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponse =
  z.void();

export const zGetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponse =
  zCloudDocument;

export const zGetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponse =
  zManagedIngestionStatusResponse;

export const zListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponse =
  z.array(zTextNode);

export const zListRetrieversApiV1RetrieversGetResponse = z.array(zRetriever);

export const zCreateRetrieverApiV1RetrieversPostResponse = zRetriever;

export const zUpsertRetrieverApiV1RetrieversPutResponse = zRetriever;

export const zDeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponse =
  z.void();

export const zGetRetrieverApiV1RetrieversRetrieverIdGetResponse = zRetriever;

export const zUpdateRetrieverApiV1RetrieversRetrieverIdPutResponse = zRetriever;

export const zRetrieveApiV1RetrieversRetrieverIdRetrievePostResponse =
  zCompositeRetrievalResult;

export const zDirectRetrieveApiV1RetrieversRetrievePostResponse =
  zCompositeRetrievalResult;

export const zGetJobsApiV1JobsGetResponse = zPaginatedJobsHistoryWithMetrics;

export const zListSupportedModelsApiV1EvalsModelsGetResponse =
  z.array(zSupportedLlmModel);

export const zGetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponse =
  z.array(zLlamaParseSupportedFileExtensions);

export const zScreenshotApiV1ParsingScreenshotPostResponse = zParsingJob;

export const zUploadFileApiV1ParsingUploadPostResponse = zParsingJob;

export const zGetJobApiV1ParsingJobJobIdGetResponse = zParsingJob;

export const zGetJobTextResultApiV1ParsingJobJobIdResultTextGetResponse =
  zParsingJobTextResult;

export const zGetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponse =
  zParsingJobStructuredResult;

export const zGetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponse =
  zParsingJobMarkdownResult;

export const zGetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponse =
  zParsingJobJsonResult;

export const zGetParsingHistoryResultApiV1ParsingHistoryGetResponse =
  z.array(zParsingHistoryItem);

export const zGeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponse =
  zPresignedUrl;

export const zGetChatAppsApiV1AppsGetResponse = z.array(zChatAppResponse);

export const zCreateChatAppApiV1AppsPostResponse = zChatApp;

export const zGetChatAppApiV1AppsIdGetResponse = zChatApp;

export const zUpdateChatAppApiV1AppsIdPutResponse = zChatApp;

export const zListDeploymentsApiV1ProjectsProjectIdAgentsGetResponse =
  zAgentDeploymentList;

export const zSyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponse =
  zAgentDeploymentList;

export const zClassifyDocumentsApiV1ClassifierClassifyPostResponse =
  zClassifyResponse;

export const zCreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponse =
  z.string();

export const zDowngradePlanApiV1BillingDowngradePlanPostResponse = z.object({});

export const zCreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponse =
  zCreateIntentAndCustomerSessionResponse;

export const zGetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponse =
  zMetronomeDashboardResponse;

export const zListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponse =
  z.array(zExtractAgent);

export const zCreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponse =
  zExtractAgent;

export const zValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponse =
  zExtractSchemaValidateResponse;

export const zGenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponse =
  zExtractSchemaGenerateResponse;

export const zGetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponse =
  zExtractAgent;

export const zGetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponse =
  zExtractAgent;

export const zUpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponse =
  zExtractAgent;

export const zListJobsApiV1ExtractionJobsGetResponse = z.array(zExtractJob);

export const zRunJobApiV1ExtractionJobsPostResponse = zExtractJob;

export const zGetJobApiV1ExtractionJobsJobIdGetResponse = zExtractJob;

export const zRunJobTestUserApiV1ExtractionJobsTestPostResponse = zExtractJob;

export const zRunJobOnFileApiV1ExtractionJobsFilePostResponse = zExtractJob;

export const zRunBatchJobsApiV1ExtractionJobsBatchPostResponse =
  z.array(zExtractJob);

export const zGetJobResultApiV1ExtractionJobsJobIdResultGetResponse =
  zExtractResultset;

export const zListExtractRunsApiV1ExtractionRunsGetResponse =
  zPaginatedExtractRunsResponse;

export const zGetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponse =
  z.union([zExtractRun, z.null()]);

export const zGetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponse =
  zExtractRun;

export const zGetRunApiV1ExtractionRunsRunIdGetResponse = zExtractRun;

export const zCreateReportApiV1ReportsPostResponse = zReportCreateResponse;

export const zListReportsApiV1ReportsListGetResponse = zPaginatedReportResponse;

export const zGetReportApiV1ReportsReportIdGetResponse = zReportResponse;

export const zUpdateReportApiV1ReportsReportIdPatchResponse = zReportResponse;

export const zUpdateReportMetadataApiV1ReportsReportIdPostResponse =
  zReportMetadata;

export const zGetReportPlanApiV1ReportsReportIdPlanGetResponse = zReportPlan;

export const zUpdateReportPlanApiV1ReportsReportIdPlanPatchResponse =
  zReportResponse;

export const zGetReportEventsApiV1ReportsReportIdEventsGetResponse =
  z.array(zReportEventItem);

export const zGetReportMetadataApiV1ReportsReportIdMetadataGetResponse =
  zReportMetadata;

export const zSuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponse =
  z.array(zEditSuggestion);

export const zListBatchesApiV1BetaBatchesGetResponse = zBatchPaginatedList;

export const zCreateBatchApiV1BetaBatchesPostResponse = zBatch;

export const zGetBatchApiV1BetaBatchesBatchIdGetResponse = zBatchPublicOutput;

export const zDeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponse = z.object(
  {},
);

export const zGetAgentDataApiV1BetaAgentDataItemIdGetResponse = zAgentData;

export const zUpdateAgentDataApiV1BetaAgentDataItemIdPutResponse = zAgentData;

export const zCreateAgentDataApiV1BetaAgentDataPostResponse = zAgentData;

export const zSearchAgentDataApiV1BetaAgentDataSearchPostResponse =
  zPaginatedResponseAgentData;

export const zAggregateAgentDataApiV1BetaAgentDataAggregatePostResponse =
  zPaginatedResponseAggregateGroup;

export const zGetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponse =
  z.array(zLlamaParseSupportedFileExtensions);

export const zScreenshotApiParsingScreenshotPostResponse = zParsingJob;

export const zUploadFileApiParsingUploadPostResponse = zParsingJob;

export const zGetJobApiParsingJobJobIdGetResponse = zParsingJob;

export const zGetJobTextResultApiParsingJobJobIdResultTextGetResponse =
  zParsingJobTextResult;

export const zGetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponse =
  zParsingJobStructuredResult;

export const zGetJobResultApiParsingJobJobIdResultMarkdownGetResponse =
  zParsingJobMarkdownResult;

export const zGetJobJsonResultApiParsingJobJobIdResultJsonGetResponse =
  zParsingJobJsonResult;

export const zGetParsingHistoryResultApiParsingHistoryGetResponse =
  z.array(zParsingHistoryItem);

export const zGeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponse =
  zPresignedUrl;
